{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to qtstrap Under Construction","title":"Overview"},{"location":"#welcome-to-qtstrap","text":"Under Construction","title":"Welcome to qtstrap"},{"location":"gettingstarted/","text":"Getting Started","title":"Getting Started"},{"location":"gettingstarted/#getting-started","text":"","title":"Getting Started"},{"location":"installation/","text":"Installation Existing Projects: Adding qtstrap to an existing project is easy python3 -m pip install qtstrap New Projects: This is the recommended way to create a new project using qtstrap: $ mkdir test && cd test $ python3 -m venv .venv $ source .venv/bin/activate $ python3 -m pip install qtstrap PySide2 $ qtstrap init The init script will prompt you to enter the name of your application and the name of its publisher(which is probably you), and then it will generate an application skeleton. At this point you can deactivate the virtual environment and forget it exists(until you need to add a package or something). You can test that everything installed properly by executing: $ make run If you see a window like this, then you're good to go:","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#existing-projects","text":"Adding qtstrap to an existing project is easy python3 -m pip install qtstrap","title":"Existing Projects:"},{"location":"installation/#new-projects","text":"This is the recommended way to create a new project using qtstrap: $ mkdir test && cd test $ python3 -m venv .venv $ source .venv/bin/activate $ python3 -m pip install qtstrap PySide2 $ qtstrap init The init script will prompt you to enter the name of your application and the name of its publisher(which is probably you), and then it will generate an application skeleton. At this point you can deactivate the virtual environment and forget it exists(until you need to add a package or something). You can test that everything installed properly by executing: $ make run If you see a window like this, then you're good to go:","title":"New Projects:"},{"location":"structure/makefile/","text":"Makefile The provided Makefile has several targets that assist with general project development. Using the Makefile means that you do not have to activate the venv unless you need to interact with it directly. The Makefile uses specially constructed targets to automatically build the venv and execute using the venv's python installation. General targets: make run run your project make debug run your project in debug mode make bundle builds a single-folder bundle using PyInstaller make run_bundle run the single-folder bundle's executable make zip compress the bundle into a zip file make installer wrap the bundle into a Windows installer using Inno Setup make clean delete the project's build artifacts The Makefile also seamlessly manages your python virtual environment using the following targets: make venv create the venv, if it doesn't exist make pip passes it's args to the venv's pip make clean_venv make reset_venv","title":"Makefile"},{"location":"structure/makefile/#makefile","text":"The provided Makefile has several targets that assist with general project development. Using the Makefile means that you do not have to activate the venv unless you need to interact with it directly. The Makefile uses specially constructed targets to automatically build the venv and execute using the venv's python installation. General targets: make run run your project make debug run your project in debug mode make bundle builds a single-folder bundle using PyInstaller make run_bundle run the single-folder bundle's executable make zip compress the bundle into a zip file make installer wrap the bundle into a Windows installer using Inno Setup make clean delete the project's build artifacts The Makefile also seamlessly manages your python virtual environment using the following targets: make venv create the venv, if it doesn't exist make pip passes it's args to the venv's pip make clean_venv make reset_venv","title":"Makefile"},{"location":"structure/structure/","text":"Project Structure This is the project structure that's created by running qtstrap init : |-- src | |-- main.py | |-- application.py | |-- mainwindow.py |-- resources | |-- application.ico | |-- icon.svg |-- bundle.spec |-- installer.iss |-- Makefile |-- project.ini |-- requirements.txt Files src folder Your application's python source code should all be placed here. A newly created qtstrap project contains src/main.py , src/application.py , and src/main_window.py . Makefile The provided Makefile has several targets that assist with general project development. Using the Makefile means that you do not have to activate the venv unless you need to interact with it directly. The Makefile uses specially constructed targets to automatically build the venv and execute using the venv's python installation. Most of the time you'll just use make run to start your application. When you're ready to package up your app for distribution, you'll want to use make bundle , make zip , and (on Windows) make installer . More information about the Makefile and it's targets can found here project.ini Contains information about the project like the Application Name and Publisher. This file is referenced by bundle.spec and installer.iss , and used to feed information to PyInstaller and InnoSetup. The project file defines the following fields: AppName your app's name AppVersion your app's version number AppPublisher your app's publisher, which is most likely you AppExeName the name of the executable created by make bundle AppIconName the path to your application's icon AppId a GUID used by Inno Setup to uniquely identify your app resources/application.ico and icon.svg Icon files that are automatically applied to the app's titlebar, taskbar entry, bundle, and installer. When running the bundled executable, the installer, or the installed version of your app, the icon should also appear in Windows Task Manager. requirements.txt Your application's python dependecies. If your application uses any packages, you should list them here, preferably with the versions pinned. A fresh project created with qtstrap init looks something like this: altgraph==0.17 click==7.1.2 future==0.18.2 pefile==2019.4.18 prompt-toolkit==1.0.14 Pygments==2.8.1 PyInquirer==1.0.3 pyinstaller==4.2 pyinstaller-hooks-contrib==2021.1 PySide2==5.15.2 pywin32-ctypes==0.2.0 qtstrap==0.0.7 regex==2021.3.17 shiboken2==5.15.2 six==1.15.0 wcwidth==0.2.5 bundle.spec A PyInstaller spec file that creates a single-folder executable. The bundle is created at ./dist/$AppName/ , and the executable at ./dist/$AppName/$AppName.exe . installer.iss An Inno Setup setup compiler script that creates a Windows installer. The installer is created at /dist/installer/$AppName-$AppVersion-Setup.exe","title":"Project Structure"},{"location":"structure/structure/#project-structure","text":"This is the project structure that's created by running qtstrap init : |-- src | |-- main.py | |-- application.py | |-- mainwindow.py |-- resources | |-- application.ico | |-- icon.svg |-- bundle.spec |-- installer.iss |-- Makefile |-- project.ini |-- requirements.txt","title":"Project Structure"},{"location":"structure/structure/#files","text":"","title":"Files"},{"location":"structure/structure/#src-folder","text":"Your application's python source code should all be placed here. A newly created qtstrap project contains src/main.py , src/application.py , and src/main_window.py .","title":"src folder"},{"location":"structure/structure/#makefile","text":"The provided Makefile has several targets that assist with general project development. Using the Makefile means that you do not have to activate the venv unless you need to interact with it directly. The Makefile uses specially constructed targets to automatically build the venv and execute using the venv's python installation. Most of the time you'll just use make run to start your application. When you're ready to package up your app for distribution, you'll want to use make bundle , make zip , and (on Windows) make installer . More information about the Makefile and it's targets can found here","title":"Makefile"},{"location":"structure/structure/#projectini","text":"Contains information about the project like the Application Name and Publisher. This file is referenced by bundle.spec and installer.iss , and used to feed information to PyInstaller and InnoSetup. The project file defines the following fields: AppName your app's name AppVersion your app's version number AppPublisher your app's publisher, which is most likely you AppExeName the name of the executable created by make bundle AppIconName the path to your application's icon AppId a GUID used by Inno Setup to uniquely identify your app","title":"project.ini"},{"location":"structure/structure/#resourcesapplicationico-and-iconsvg","text":"Icon files that are automatically applied to the app's titlebar, taskbar entry, bundle, and installer. When running the bundled executable, the installer, or the installed version of your app, the icon should also appear in Windows Task Manager.","title":"resources/application.ico and icon.svg"},{"location":"structure/structure/#requirementstxt","text":"Your application's python dependecies. If your application uses any packages, you should list them here, preferably with the versions pinned. A fresh project created with qtstrap init looks something like this: altgraph==0.17 click==7.1.2 future==0.18.2 pefile==2019.4.18 prompt-toolkit==1.0.14 Pygments==2.8.1 PyInquirer==1.0.3 pyinstaller==4.2 pyinstaller-hooks-contrib==2021.1 PySide2==5.15.2 pywin32-ctypes==0.2.0 qtstrap==0.0.7 regex==2021.3.17 shiboken2==5.15.2 six==1.15.0 wcwidth==0.2.5","title":"requirements.txt"},{"location":"structure/structure/#bundlespec","text":"A PyInstaller spec file that creates a single-folder executable. The bundle is created at ./dist/$AppName/ , and the executable at ./dist/$AppName/$AppName.exe .","title":"bundle.spec"},{"location":"structure/structure/#installeriss","text":"An Inno Setup setup compiler script that creates a Windows installer. The installer is created at /dist/installer/$AppName-$AppVersion-Setup.exe","title":"installer.iss"},{"location":"widgets/baseapplication/","text":"","title":"Baseapplication"},{"location":"widgets/basemainwindow/","text":"","title":"Basemainwindow"}]}