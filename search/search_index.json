{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to qtstrap's documentation qtstrap is a framework that helps you skip over the boring and tedious parts of developing applications with PySide2/PyQt. Features qtstrap command line tool to bootstrap new projects crossplatform makefile with useful development commands preconfigured pyinstaller spec file preconfigured InnoSetup setup compiler script Pythonic layout system using ContextLayouts light/dark theme with application-level theme switching Some other stuff I haven't remembered yet Custom Widgets LabelEdit HLine and VLine LinkLabel Buttons: StateButton IconToggleButton ConfirmToggleButton MenuButton Persistent Widgets (for rapid prototyping of saved data) PersistentCheckableAction PersistentCheckBox PersistentComboBox PersistentLineEdit PersistentListWidget PersistentPlainTextEdit PersistentTabWidget PersistentTextEdit PersistentTreeWidget Utility Classes and Functions Adapter TimeStamp StringBuilder call_later() decorators: @accepts_file_drops @trace @singleton context managers: Defer SignalBlocker qtstrap.extras: CommandPalette, like VSCode or SublimeText Logging Subsystem: log to local database + log viewer widgets CodeEditor: Custom QTextEditor subclass customized for code editing Roadmap Write documentation for ContextLayouts Create a sane menu bar constructor Create an application auto-updater Create an application crash reporter Set up CI/CD Add 'Qt principles' section","title":"Home"},{"location":"#welcome-to-qtstraps-documentation","text":"qtstrap is a framework that helps you skip over the boring and tedious parts of developing applications with PySide2/PyQt.","title":"Welcome to qtstrap's documentation"},{"location":"#features","text":"qtstrap command line tool to bootstrap new projects crossplatform makefile with useful development commands preconfigured pyinstaller spec file preconfigured InnoSetup setup compiler script Pythonic layout system using ContextLayouts light/dark theme with application-level theme switching Some other stuff I haven't remembered yet","title":"Features"},{"location":"#custom-widgets","text":"LabelEdit HLine and VLine LinkLabel","title":"Custom Widgets"},{"location":"#buttons","text":"StateButton IconToggleButton ConfirmToggleButton MenuButton","title":"Buttons:"},{"location":"#persistent-widgets-for-rapid-prototyping-of-saved-data","text":"PersistentCheckableAction PersistentCheckBox PersistentComboBox PersistentLineEdit PersistentListWidget PersistentPlainTextEdit PersistentTabWidget PersistentTextEdit PersistentTreeWidget","title":"Persistent Widgets (for rapid prototyping of saved data)"},{"location":"#utility-classes-and-functions","text":"Adapter TimeStamp StringBuilder call_later()","title":"Utility Classes and Functions"},{"location":"#decorators","text":"@accepts_file_drops @trace @singleton","title":"decorators:"},{"location":"#context-managers","text":"Defer SignalBlocker","title":"context managers:"},{"location":"#qtstrapextras","text":"CommandPalette, like VSCode or SublimeText Logging Subsystem: log to local database + log viewer widgets CodeEditor: Custom QTextEditor subclass customized for code editing","title":"qtstrap.extras:"},{"location":"#roadmap","text":"Write documentation for ContextLayouts Create a sane menu bar constructor Create an application auto-updater Create an application crash reporter Set up CI/CD Add 'Qt principles' section","title":"Roadmap"},{"location":"test/","text":"qtstrap qtstrap.base_application qtstrap.base_window qtstrap.extras.code_editor.code_editor qtstrap.extras.code_editor.code_line qtstrap.extras.code_editor.highlighters.python format def format(color, style='') Return a QTextCharFormat with the given attributes. PythonHighlighter Objects class PythonHighlighter(QSyntaxHighlighter) Syntax highlighter for the Python language. highlightBlock def highlightBlock(text) Apply syntax highlighting to the given block of text. match_multiline def match_multiline(text, delimiter, in_state, style) Do highlighting of multi-line strings. delimiter should be a QRegularExpression for triple-single-quotes or triple-double-quotes, and in_state should be a unique integer to represent the corresponding state changes when inside those strings. Returns True if we're still inside a multi-line string when this function is finished. qtstrap.extras.code_editor.highlighters qtstrap.extras.code_editor qtstrap.extras.command_palette.command_palette qtstrap.extras.command_palette qtstrap.extras.log_monitor.log_database_handler DatabaseHandler Objects class DatabaseHandler(logging.Handler) callbacks A logging.Handler subclass that redirects outbound records to a local sqlite3 database qtstrap.extras.log_monitor.log_filter_controls qtstrap.extras.log_monitor.log_profile qtstrap.extras.log_monitor.log_table_view qtstrap.extras.log_monitor.log_widget qtstrap.extras.log_monitor qtstrap.extras.style.colors qtstrap.extras.style.dark_palette qtstrap.extras.style qtstrap.extras qtstrap.options qtstrap.qt qtstrap.settings uncache def uncache(exclude) Remove package modules from cache except excluded ones. On next import they will be reloaded. Arguments : exclude iter - Sequence of module paths. qtstrap.template.app.main qtstrap.toolbar qtstrap.utils.adapter Adapter Objects class Adapter(QObject) A signal adapter that helps create disposable connections between objects. A signal-based interface can be defined using an Adapter. Passing an existing Adapter when creating a new Adapter will automatically link all of the existing adapter's signals to the same-named signals on the new Adapter. This will allow some other object to connect to these signals for whatever purpose, and then simply delete the new Adapter object when it now longer wants to recieve signals. Technically, Qt Signals already have a .disconnect() method, but I've never gotten it work reliably. Using an Adapter essentially gives you a nuclear .disconnect(). qtstrap.utils.decorators qtstrap.utils.defer Defer Objects class Defer() A context manager that emulates the defer keyword from other languages. The deferred thing can be any callable, and arbitrary args and kwargs will be preserved and passed to the thing during exit (). qtstrap.utils.signals SignalBlocker Objects class SignalBlocker() A context manager that blocks the signals of the provided widget. The signals are unblocked at the end of the with block. qtstrap.utils.singleton singleton def singleton(class_) qtstrap.utils.timestamp qtstrap.utils.utils enable_children def enable_children(thing: QObject) -> None Recursively walk the provided thing and enable all of its widget children. disable_children def disable_children(thing: QObject) -> None Recursively walk the provided thing and disable all of its widget children. get_children def get_children(obj: QObject) -> list Recursively visit all the children of the specified object and collect them in a list. print_children def print_children(obj: QObject, prefix='') -> None Recursively visit all the children of the specified object and print them. set_font_options def set_font_options(obj: QObject, options={}) Set the QFont options of the specified object. Font options are specified by providing the name of the QFont setter method. Example : set_font_options(widget, {'setPointSize': 12, 'setBold': True}) is equivalent to writing: font = widget.font() font.setPointSize(12) font.setBold(True) widget.setFont(font) qtstrap.utils qtstrap.version qtstrap.widgets.buttons qtstrap.widgets.labeledit qtstrap.widgets.layouts qtstrap.widgets.line_widgets qtstrap.widgets.link_label qtstrap.widgets.persistent_tab_widget qtstrap.widgets.persistent_widgets qtstrap.widgets qtstrap.__main__","title":"Test"},{"location":"test/#qtstrap","text":"","title":"qtstrap"},{"location":"test/#qtstrapbase_application","text":"","title":"qtstrap.base_application"},{"location":"test/#qtstrapbase_window","text":"","title":"qtstrap.base_window"},{"location":"test/#qtstrapextrascode_editorcode_editor","text":"","title":"qtstrap.extras.code_editor.code_editor"},{"location":"test/#qtstrapextrascode_editorcode_line","text":"","title":"qtstrap.extras.code_editor.code_line"},{"location":"test/#qtstrapextrascode_editorhighlighterspython","text":"","title":"qtstrap.extras.code_editor.highlighters.python"},{"location":"test/#format","text":"def format(color, style='') Return a QTextCharFormat with the given attributes.","title":"format"},{"location":"test/#pythonhighlighter-objects","text":"class PythonHighlighter(QSyntaxHighlighter) Syntax highlighter for the Python language.","title":"PythonHighlighter Objects"},{"location":"test/#highlightblock","text":"def highlightBlock(text) Apply syntax highlighting to the given block of text.","title":"highlightBlock"},{"location":"test/#match_multiline","text":"def match_multiline(text, delimiter, in_state, style) Do highlighting of multi-line strings. delimiter should be a QRegularExpression for triple-single-quotes or triple-double-quotes, and in_state should be a unique integer to represent the corresponding state changes when inside those strings. Returns True if we're still inside a multi-line string when this function is finished.","title":"match_multiline"},{"location":"test/#qtstrapextrascode_editorhighlighters","text":"","title":"qtstrap.extras.code_editor.highlighters"},{"location":"test/#qtstrapextrascode_editor","text":"","title":"qtstrap.extras.code_editor"},{"location":"test/#qtstrapextrascommand_palettecommand_palette","text":"","title":"qtstrap.extras.command_palette.command_palette"},{"location":"test/#qtstrapextrascommand_palette","text":"","title":"qtstrap.extras.command_palette"},{"location":"test/#qtstrapextraslog_monitorlog_database_handler","text":"","title":"qtstrap.extras.log_monitor.log_database_handler"},{"location":"test/#databasehandler-objects","text":"class DatabaseHandler(logging.Handler)","title":"DatabaseHandler Objects"},{"location":"test/#callbacks","text":"A logging.Handler subclass that redirects outbound records to a local sqlite3 database","title":"callbacks"},{"location":"test/#qtstrapextraslog_monitorlog_filter_controls","text":"","title":"qtstrap.extras.log_monitor.log_filter_controls"},{"location":"test/#qtstrapextraslog_monitorlog_profile","text":"","title":"qtstrap.extras.log_monitor.log_profile"},{"location":"test/#qtstrapextraslog_monitorlog_table_view","text":"","title":"qtstrap.extras.log_monitor.log_table_view"},{"location":"test/#qtstrapextraslog_monitorlog_widget","text":"","title":"qtstrap.extras.log_monitor.log_widget"},{"location":"test/#qtstrapextraslog_monitor","text":"","title":"qtstrap.extras.log_monitor"},{"location":"test/#qtstrapextrasstylecolors","text":"","title":"qtstrap.extras.style.colors"},{"location":"test/#qtstrapextrasstyledark_palette","text":"","title":"qtstrap.extras.style.dark_palette"},{"location":"test/#qtstrapextrasstyle","text":"","title":"qtstrap.extras.style"},{"location":"test/#qtstrapextras","text":"","title":"qtstrap.extras"},{"location":"test/#qtstrapoptions","text":"","title":"qtstrap.options"},{"location":"test/#qtstrapqt","text":"","title":"qtstrap.qt"},{"location":"test/#qtstrapsettings","text":"","title":"qtstrap.settings"},{"location":"test/#uncache","text":"def uncache(exclude) Remove package modules from cache except excluded ones. On next import they will be reloaded. Arguments : exclude iter - Sequence of module paths.","title":"uncache"},{"location":"test/#qtstraptemplateappmain","text":"","title":"qtstrap.template.app.main"},{"location":"test/#qtstraptoolbar","text":"","title":"qtstrap.toolbar"},{"location":"test/#qtstraputilsadapter","text":"","title":"qtstrap.utils.adapter"},{"location":"test/#adapter-objects","text":"class Adapter(QObject) A signal adapter that helps create disposable connections between objects. A signal-based interface can be defined using an Adapter. Passing an existing Adapter when creating a new Adapter will automatically link all of the existing adapter's signals to the same-named signals on the new Adapter. This will allow some other object to connect to these signals for whatever purpose, and then simply delete the new Adapter object when it now longer wants to recieve signals. Technically, Qt Signals already have a .disconnect() method, but I've never gotten it work reliably. Using an Adapter essentially gives you a nuclear .disconnect().","title":"Adapter Objects"},{"location":"test/#qtstraputilsdecorators","text":"","title":"qtstrap.utils.decorators"},{"location":"test/#qtstraputilsdefer","text":"","title":"qtstrap.utils.defer"},{"location":"test/#defer-objects","text":"class Defer() A context manager that emulates the defer keyword from other languages. The deferred thing can be any callable, and arbitrary args and kwargs will be preserved and passed to the thing during exit ().","title":"Defer Objects"},{"location":"test/#qtstraputilssignals","text":"","title":"qtstrap.utils.signals"},{"location":"test/#signalblocker-objects","text":"class SignalBlocker() A context manager that blocks the signals of the provided widget. The signals are unblocked at the end of the with block.","title":"SignalBlocker Objects"},{"location":"test/#qtstraputilssingleton","text":"","title":"qtstrap.utils.singleton"},{"location":"test/#singleton","text":"def singleton(class_)","title":"singleton"},{"location":"test/#qtstraputilstimestamp","text":"","title":"qtstrap.utils.timestamp"},{"location":"test/#qtstraputilsutils","text":"","title":"qtstrap.utils.utils"},{"location":"test/#enable_children","text":"def enable_children(thing: QObject) -> None Recursively walk the provided thing and enable all of its widget children.","title":"enable_children"},{"location":"test/#disable_children","text":"def disable_children(thing: QObject) -> None Recursively walk the provided thing and disable all of its widget children.","title":"disable_children"},{"location":"test/#get_children","text":"def get_children(obj: QObject) -> list Recursively visit all the children of the specified object and collect them in a list.","title":"get_children"},{"location":"test/#print_children","text":"def print_children(obj: QObject, prefix='') -> None Recursively visit all the children of the specified object and print them.","title":"print_children"},{"location":"test/#set_font_options","text":"def set_font_options(obj: QObject, options={}) Set the QFont options of the specified object. Font options are specified by providing the name of the QFont setter method. Example : set_font_options(widget, {'setPointSize': 12, 'setBold': True}) is equivalent to writing: font = widget.font() font.setPointSize(12) font.setBold(True) widget.setFont(font)","title":"set_font_options"},{"location":"test/#qtstraputils","text":"","title":"qtstrap.utils"},{"location":"test/#qtstrapversion","text":"","title":"qtstrap.version"},{"location":"test/#qtstrapwidgetsbuttons","text":"","title":"qtstrap.widgets.buttons"},{"location":"test/#qtstrapwidgetslabeledit","text":"","title":"qtstrap.widgets.labeledit"},{"location":"test/#qtstrapwidgetslayouts","text":"","title":"qtstrap.widgets.layouts"},{"location":"test/#qtstrapwidgetsline_widgets","text":"","title":"qtstrap.widgets.line_widgets"},{"location":"test/#qtstrapwidgetslink_label","text":"","title":"qtstrap.widgets.link_label"},{"location":"test/#qtstrapwidgetspersistent_tab_widget","text":"","title":"qtstrap.widgets.persistent_tab_widget"},{"location":"test/#qtstrapwidgetspersistent_widgets","text":"","title":"qtstrap.widgets.persistent_widgets"},{"location":"test/#qtstrapwidgets","text":"","title":"qtstrap.widgets"},{"location":"test/#qtstrap__main__","text":"","title":"qtstrap.__main__"},{"location":"api/experimental/","text":"module experimental This file was automatically generated via lazydocs .","title":"Experimental"},{"location":"api/experimental/#module-experimental","text":"This file was automatically generated via lazydocs .","title":"module experimental"},{"location":"api/extras.code_editor.code_editor/","text":"module extras.code_editor.code_editor Global Variables TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 class CodeEditor method CodeEditor.__init__ __init__(*args, changed=None, model=None, highlighter=None, **kwargs) method CodeEditor.duplicate_selection duplicate_selection(direction) method CodeEditor.eventFilter eventFilter(obj, event) method CodeEditor.expand_selection expand_selection(cursor) method CodeEditor.indent_selection indent_selection(direction) method CodeEditor.insert_completion insert_completion(completion) method CodeEditor.keyPressEvent keyPressEvent(event: PySide2.QtGui.QKeyEvent) method CodeEditor.move_selection move_selection(direction) method CodeEditor.text text() method CodeEditor.text_under_cursor text_under_cursor() method CodeEditor.toggle_comments toggle_comments() method CodeEditor.update_tab_width update_tab_width() method CodeEditor.wrap_selection wrap_selection(key) This file was automatically generated via lazydocs .","title":"Extras.code editor.code editor"},{"location":"api/extras.code_editor.code_editor/#module-extrascode_editorcode_editor","text":"","title":"module extras.code_editor.code_editor"},{"location":"api/extras.code_editor.code_editor/#global-variables","text":"TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6","title":"Global Variables"},{"location":"api/extras.code_editor.code_editor/#class-codeeditor","text":"","title":"class CodeEditor"},{"location":"api/extras.code_editor.code_editor/#method-codeeditor__init__","text":"__init__(*args, changed=None, model=None, highlighter=None, **kwargs)","title":"method CodeEditor.__init__"},{"location":"api/extras.code_editor.code_editor/#method-codeeditorduplicate_selection","text":"duplicate_selection(direction)","title":"method CodeEditor.duplicate_selection"},{"location":"api/extras.code_editor.code_editor/#method-codeeditoreventfilter","text":"eventFilter(obj, event)","title":"method CodeEditor.eventFilter"},{"location":"api/extras.code_editor.code_editor/#method-codeeditorexpand_selection","text":"expand_selection(cursor)","title":"method CodeEditor.expand_selection"},{"location":"api/extras.code_editor.code_editor/#method-codeeditorindent_selection","text":"indent_selection(direction)","title":"method CodeEditor.indent_selection"},{"location":"api/extras.code_editor.code_editor/#method-codeeditorinsert_completion","text":"insert_completion(completion)","title":"method CodeEditor.insert_completion"},{"location":"api/extras.code_editor.code_editor/#method-codeeditorkeypressevent","text":"keyPressEvent(event: PySide2.QtGui.QKeyEvent)","title":"method CodeEditor.keyPressEvent"},{"location":"api/extras.code_editor.code_editor/#method-codeeditormove_selection","text":"move_selection(direction)","title":"method CodeEditor.move_selection"},{"location":"api/extras.code_editor.code_editor/#method-codeeditortext","text":"text()","title":"method CodeEditor.text"},{"location":"api/extras.code_editor.code_editor/#method-codeeditortext_under_cursor","text":"text_under_cursor()","title":"method CodeEditor.text_under_cursor"},{"location":"api/extras.code_editor.code_editor/#method-codeeditortoggle_comments","text":"toggle_comments()","title":"method CodeEditor.toggle_comments"},{"location":"api/extras.code_editor.code_editor/#method-codeeditorupdate_tab_width","text":"update_tab_width()","title":"method CodeEditor.update_tab_width"},{"location":"api/extras.code_editor.code_editor/#method-codeeditorwrap_selection","text":"wrap_selection(key) This file was automatically generated via lazydocs .","title":"method CodeEditor.wrap_selection"},{"location":"api/extras.code_editor.code_line/","text":"module extras.code_editor.code_line Global Variables TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 class CodeLine method CodeLine.__init__ __init__(*args, **kwargs) method CodeLine.keyPressEvent keyPressEvent(event: PySide2.QtGui.QKeyEvent) This file was automatically generated via lazydocs .","title":"Extras.code editor.code line"},{"location":"api/extras.code_editor.code_line/#module-extrascode_editorcode_line","text":"","title":"module extras.code_editor.code_line"},{"location":"api/extras.code_editor.code_line/#global-variables","text":"TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6","title":"Global Variables"},{"location":"api/extras.code_editor.code_line/#class-codeline","text":"","title":"class CodeLine"},{"location":"api/extras.code_editor.code_line/#method-codeline__init__","text":"__init__(*args, **kwargs)","title":"method CodeLine.__init__"},{"location":"api/extras.code_editor.code_line/#method-codelinekeypressevent","text":"keyPressEvent(event: PySide2.QtGui.QKeyEvent) This file was automatically generated via lazydocs .","title":"method CodeLine.keyPressEvent"},{"location":"api/extras.code_editor.highlighters/","text":"module extras.code_editor.highlighters Global Variables python This file was automatically generated via lazydocs .","title":"Extras.code editor.highlighters"},{"location":"api/extras.code_editor.highlighters/#module-extrascode_editorhighlighters","text":"","title":"module extras.code_editor.highlighters"},{"location":"api/extras.code_editor.highlighters/#global-variables","text":"python This file was automatically generated via lazydocs .","title":"Global Variables"},{"location":"api/extras.code_editor.highlighters.python/","text":"module extras.code_editor.highlighters.python Global Variables TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 STYLES function format format(color, style='') Return a QTextCharFormat with the given attributes. function get_style get_style(kind) class PythonHighlighter Syntax highlighter for the Python language. method PythonHighlighter.__init__ __init__(document) method PythonHighlighter.build_rules build_rules() method PythonHighlighter.highlightBlock highlightBlock(text) Apply syntax highlighting to the given block of text. method PythonHighlighter.match_multiline match_multiline(text, delimiter, in_state, style) Do highlighting of multi-line strings. delimiter should be a QRegularExpression for triple-single-quotes or triple-double-quotes, and in_state should be a unique integer to represent the corresponding state changes when inside those strings. Returns True if we're still inside a multi-line string when this function is finished. This file was automatically generated via lazydocs .","title":"Extras.code editor.highlighters.python"},{"location":"api/extras.code_editor.highlighters.python/#module-extrascode_editorhighlighterspython","text":"","title":"module extras.code_editor.highlighters.python"},{"location":"api/extras.code_editor.highlighters.python/#global-variables","text":"TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 STYLES","title":"Global Variables"},{"location":"api/extras.code_editor.highlighters.python/#function-format","text":"format(color, style='') Return a QTextCharFormat with the given attributes.","title":"function format"},{"location":"api/extras.code_editor.highlighters.python/#function-get_style","text":"get_style(kind)","title":"function get_style"},{"location":"api/extras.code_editor.highlighters.python/#class-pythonhighlighter","text":"Syntax highlighter for the Python language.","title":"class PythonHighlighter"},{"location":"api/extras.code_editor.highlighters.python/#method-pythonhighlighter__init__","text":"__init__(document)","title":"method PythonHighlighter.__init__"},{"location":"api/extras.code_editor.highlighters.python/#method-pythonhighlighterbuild_rules","text":"build_rules()","title":"method PythonHighlighter.build_rules"},{"location":"api/extras.code_editor.highlighters.python/#method-pythonhighlighterhighlightblock","text":"highlightBlock(text) Apply syntax highlighting to the given block of text.","title":"method PythonHighlighter.highlightBlock"},{"location":"api/extras.code_editor.highlighters.python/#method-pythonhighlightermatch_multiline","text":"match_multiline(text, delimiter, in_state, style) Do highlighting of multi-line strings. delimiter should be a QRegularExpression for triple-single-quotes or triple-double-quotes, and in_state should be a unique integer to represent the corresponding state changes when inside those strings. Returns True if we're still inside a multi-line string when this function is finished. This file was automatically generated via lazydocs .","title":"method PythonHighlighter.match_multiline"},{"location":"api/extras.code_editor/","text":"module extras.code_editor Global Variables code_editor code_line highlighters This file was automatically generated via lazydocs .","title":"Extras.code editor"},{"location":"api/extras.code_editor/#module-extrascode_editor","text":"","title":"module extras.code_editor"},{"location":"api/extras.code_editor/#global-variables","text":"code_editor code_line highlighters This file was automatically generated via lazydocs .","title":"Global Variables"},{"location":"api/extras.command_palette.command_palette/","text":"module extras.command_palette.command_palette Global Variables TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 COMMAND_PALETTE_COLORS registry function get_color get_color(key) class CommandRegistry method CommandRegistry.__init__ __init__() \u2192 None method CommandRegistry.execute execute(command_name) method CommandRegistry.register_command register_command(command) class Command method Command.__init__ __init__(*args, **kwargs) method Command.used used() class PopupDelegate method PopupDelegate.__init__ __init__(parent=None) method PopupDelegate.get_colors get_colors() method PopupDelegate.paint paint( painter: PySide2.QtGui.QPainter, option: PySide2.QtWidgets.QStyleOptionViewItem, index: PySide2.QtCore.QModelIndex ) method PopupDelegate.set_prefix set_prefix(prefix) class CommandModel method CommandModel.data data(index: PySide2.QtCore.QModelIndex, role: int) \u2192 Any method CommandModel.index index(row: int, column: int, parent: PySide2.QtCore.QModelIndex) \u2192 QModelIndex method CommandModel.rowCount rowCount(parent: PySide2.QtCore.QModelIndex) \u2192 int method CommandModel.sort_commands sort_commands(prefix) class CommandCompleter method CommandCompleter.__init__ __init__(parent=None) method CommandCompleter.close close() method CommandCompleter.get_selection get_selection() method CommandCompleter.move_selection_down move_selection_down() method CommandCompleter.move_selection_up move_selection_up() method CommandCompleter.open open() method CommandCompleter.reset reset() method CommandCompleter.update_prefix update_prefix(prefix) This file was automatically generated via lazydocs .","title":"Extras.command palette.command palette"},{"location":"api/extras.command_palette.command_palette/#module-extrascommand_palettecommand_palette","text":"","title":"module extras.command_palette.command_palette"},{"location":"api/extras.command_palette.command_palette/#global-variables","text":"TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 COMMAND_PALETTE_COLORS registry","title":"Global Variables"},{"location":"api/extras.command_palette.command_palette/#function-get_color","text":"get_color(key)","title":"function get_color"},{"location":"api/extras.command_palette.command_palette/#class-commandregistry","text":"","title":"class CommandRegistry"},{"location":"api/extras.command_palette.command_palette/#method-commandregistry__init__","text":"__init__() \u2192 None","title":"method CommandRegistry.__init__"},{"location":"api/extras.command_palette.command_palette/#method-commandregistryexecute","text":"execute(command_name)","title":"method CommandRegistry.execute"},{"location":"api/extras.command_palette.command_palette/#method-commandregistryregister_command","text":"register_command(command)","title":"method CommandRegistry.register_command"},{"location":"api/extras.command_palette.command_palette/#class-command","text":"","title":"class Command"},{"location":"api/extras.command_palette.command_palette/#method-command__init__","text":"__init__(*args, **kwargs)","title":"method Command.__init__"},{"location":"api/extras.command_palette.command_palette/#method-commandused","text":"used()","title":"method Command.used"},{"location":"api/extras.command_palette.command_palette/#class-popupdelegate","text":"","title":"class PopupDelegate"},{"location":"api/extras.command_palette.command_palette/#method-popupdelegate__init__","text":"__init__(parent=None)","title":"method PopupDelegate.__init__"},{"location":"api/extras.command_palette.command_palette/#method-popupdelegateget_colors","text":"get_colors()","title":"method PopupDelegate.get_colors"},{"location":"api/extras.command_palette.command_palette/#method-popupdelegatepaint","text":"paint( painter: PySide2.QtGui.QPainter, option: PySide2.QtWidgets.QStyleOptionViewItem, index: PySide2.QtCore.QModelIndex )","title":"method PopupDelegate.paint"},{"location":"api/extras.command_palette.command_palette/#method-popupdelegateset_prefix","text":"set_prefix(prefix)","title":"method PopupDelegate.set_prefix"},{"location":"api/extras.command_palette.command_palette/#class-commandmodel","text":"","title":"class CommandModel"},{"location":"api/extras.command_palette.command_palette/#method-commandmodeldata","text":"data(index: PySide2.QtCore.QModelIndex, role: int) \u2192 Any","title":"method CommandModel.data"},{"location":"api/extras.command_palette.command_palette/#method-commandmodelindex","text":"index(row: int, column: int, parent: PySide2.QtCore.QModelIndex) \u2192 QModelIndex","title":"method CommandModel.index"},{"location":"api/extras.command_palette.command_palette/#method-commandmodelrowcount","text":"rowCount(parent: PySide2.QtCore.QModelIndex) \u2192 int","title":"method CommandModel.rowCount"},{"location":"api/extras.command_palette.command_palette/#method-commandmodelsort_commands","text":"sort_commands(prefix)","title":"method CommandModel.sort_commands"},{"location":"api/extras.command_palette.command_palette/#class-commandcompleter","text":"","title":"class CommandCompleter"},{"location":"api/extras.command_palette.command_palette/#method-commandcompleter__init__","text":"__init__(parent=None)","title":"method CommandCompleter.__init__"},{"location":"api/extras.command_palette.command_palette/#method-commandcompleterclose","text":"close()","title":"method CommandCompleter.close"},{"location":"api/extras.command_palette.command_palette/#method-commandcompleterget_selection","text":"get_selection()","title":"method CommandCompleter.get_selection"},{"location":"api/extras.command_palette.command_palette/#method-commandcompletermove_selection_down","text":"move_selection_down()","title":"method CommandCompleter.move_selection_down"},{"location":"api/extras.command_palette.command_palette/#method-commandcompletermove_selection_up","text":"move_selection_up()","title":"method CommandCompleter.move_selection_up"},{"location":"api/extras.command_palette.command_palette/#method-commandcompleteropen","text":"open()","title":"method CommandCompleter.open"},{"location":"api/extras.command_palette.command_palette/#method-commandcompleterreset","text":"reset()","title":"method CommandCompleter.reset"},{"location":"api/extras.command_palette.command_palette/#method-commandcompleterupdate_prefix","text":"update_prefix(prefix) This file was automatically generated via lazydocs .","title":"method CommandCompleter.update_prefix"},{"location":"api/extras.command_palette/","text":"module extras.command_palette Global Variables command_palette This file was automatically generated via lazydocs .","title":"Extras.command palette"},{"location":"api/extras.command_palette/#module-extrascommand_palette","text":"","title":"module extras.command_palette"},{"location":"api/extras.command_palette/#global-variables","text":"command_palette This file was automatically generated via lazydocs .","title":"Global Variables"},{"location":"api/extras.log_monitor.log_database_handler/","text":"module extras.log_monitor.log_database_handler Global Variables TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 db_conn_name initial_sql insertion_sql class DatabaseHandler method DatabaseHandler.__init__ __init__(database_name) property DatabaseHandler.name method DatabaseHandler.emit emit(record) method DatabaseHandler.format_time format_time(record) classmethod DatabaseHandler.register_callback register_callback(cb) method DatabaseHandler.write write(m) This file was automatically generated via lazydocs .","title":"Extras.log monitor.log database handler"},{"location":"api/extras.log_monitor.log_database_handler/#module-extraslog_monitorlog_database_handler","text":"","title":"module extras.log_monitor.log_database_handler"},{"location":"api/extras.log_monitor.log_database_handler/#global-variables","text":"TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 db_conn_name initial_sql insertion_sql","title":"Global Variables"},{"location":"api/extras.log_monitor.log_database_handler/#class-databasehandler","text":"","title":"class DatabaseHandler"},{"location":"api/extras.log_monitor.log_database_handler/#method-databasehandler__init__","text":"__init__(database_name)","title":"method DatabaseHandler.__init__"},{"location":"api/extras.log_monitor.log_database_handler/#property-databasehandlername","text":"","title":"property DatabaseHandler.name"},{"location":"api/extras.log_monitor.log_database_handler/#method-databasehandleremit","text":"emit(record)","title":"method DatabaseHandler.emit"},{"location":"api/extras.log_monitor.log_database_handler/#method-databasehandlerformat_time","text":"format_time(record)","title":"method DatabaseHandler.format_time"},{"location":"api/extras.log_monitor.log_database_handler/#classmethod-databasehandlerregister_callback","text":"register_callback(cb)","title":"classmethod DatabaseHandler.register_callback"},{"location":"api/extras.log_monitor.log_database_handler/#method-databasehandlerwrite","text":"write(m) This file was automatically generated via lazydocs .","title":"method DatabaseHandler.write"},{"location":"api/extras.log_monitor.log_filter_controls/","text":"module extras.log_monitor.log_filter_controls Global Variables TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 LOG_FILTER_COLORS function get_color get_color(key) class LoggerDelegate method LoggerDelegate.paint paint(painter, option, index) class LoggerTreeWidgetItem method LoggerTreeWidgetItem.__init__ __init__(parent, name, full_name) method LoggerTreeWidgetItem.clicked clicked(column) method LoggerTreeWidgetItem.double_clicked double_clicked(column) method LoggerTreeWidgetItem.get_levels get_levels() method LoggerTreeWidgetItem.set_all_levels set_all_levels(state: bool) method LoggerTreeWidgetItem.set_levels set_levels(level_filter=[]) method LoggerTreeWidgetItem.update_data update_data() class LoggerTreeWidget method LoggerTreeWidget.__init__ __init__() method LoggerTreeWidget.click click(item, column) method LoggerTreeWidget.contextMenuEvent contextMenuEvent(event) method LoggerTreeWidget.deselect_all deselect_all() method LoggerTreeWidget.disable_all_levels disable_all_levels(pos) method LoggerTreeWidget.disable_everything disable_everything() method LoggerTreeWidget.double_click double_click(item, column) method LoggerTreeWidget.enable_all_levels enable_all_levels(pos) method LoggerTreeWidget.enable_everything enable_everything() method LoggerTreeWidget.register_logger register_logger(full_name) method LoggerTreeWidget.register_loggers register_loggers(loggers) method LoggerTreeWidget.select_all select_all() method LoggerTreeWidget.select_only select_only(pos) method LoggerTreeWidget.selection_changed selection_changed() method LoggerTreeWidget.set_levels_of_children set_levels_of_children(item, state) method LoggerTreeWidget.set_visible_loggers set_visible_loggers(visible_loggers) class ProfileSelector method ProfileSelector.__init__ __init__() method ProfileSelector.eventFilter eventFilter(source, event) method ProfileSelector.on_accept on_accept() method ProfileSelector.on_add on_add() method ProfileSelector.on_cancel on_cancel() method ProfileSelector.on_change on_change() method ProfileSelector.on_remove on_remove() class FilterControls method FilterControls.__init__ __init__(table) method FilterControls.add_profile add_profile(name) method FilterControls.change_profile change_profile(profile_name) method FilterControls.columns_changed columns_changed() method FilterControls.remove_profile remove_profile(name) method FilterControls.save_settings save_settings() method FilterControls.update_filter update_filter() This file was automatically generated via lazydocs .","title":"Extras.log monitor.log filter controls"},{"location":"api/extras.log_monitor.log_filter_controls/#module-extraslog_monitorlog_filter_controls","text":"","title":"module extras.log_monitor.log_filter_controls"},{"location":"api/extras.log_monitor.log_filter_controls/#global-variables","text":"TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 LOG_FILTER_COLORS","title":"Global Variables"},{"location":"api/extras.log_monitor.log_filter_controls/#function-get_color","text":"get_color(key)","title":"function get_color"},{"location":"api/extras.log_monitor.log_filter_controls/#class-loggerdelegate","text":"","title":"class LoggerDelegate"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggerdelegatepaint","text":"paint(painter, option, index)","title":"method LoggerDelegate.paint"},{"location":"api/extras.log_monitor.log_filter_controls/#class-loggertreewidgetitem","text":"","title":"class LoggerTreeWidgetItem"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggertreewidgetitem__init__","text":"__init__(parent, name, full_name)","title":"method LoggerTreeWidgetItem.__init__"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggertreewidgetitemclicked","text":"clicked(column)","title":"method LoggerTreeWidgetItem.clicked"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggertreewidgetitemdouble_clicked","text":"double_clicked(column)","title":"method LoggerTreeWidgetItem.double_clicked"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggertreewidgetitemget_levels","text":"get_levels()","title":"method LoggerTreeWidgetItem.get_levels"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggertreewidgetitemset_all_levels","text":"set_all_levels(state: bool)","title":"method LoggerTreeWidgetItem.set_all_levels"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggertreewidgetitemset_levels","text":"set_levels(level_filter=[])","title":"method LoggerTreeWidgetItem.set_levels"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggertreewidgetitemupdate_data","text":"update_data()","title":"method LoggerTreeWidgetItem.update_data"},{"location":"api/extras.log_monitor.log_filter_controls/#class-loggertreewidget","text":"","title":"class LoggerTreeWidget"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggertreewidget__init__","text":"__init__()","title":"method LoggerTreeWidget.__init__"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggertreewidgetclick","text":"click(item, column)","title":"method LoggerTreeWidget.click"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggertreewidgetcontextmenuevent","text":"contextMenuEvent(event)","title":"method LoggerTreeWidget.contextMenuEvent"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggertreewidgetdeselect_all","text":"deselect_all()","title":"method LoggerTreeWidget.deselect_all"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggertreewidgetdisable_all_levels","text":"disable_all_levels(pos)","title":"method LoggerTreeWidget.disable_all_levels"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggertreewidgetdisable_everything","text":"disable_everything()","title":"method LoggerTreeWidget.disable_everything"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggertreewidgetdouble_click","text":"double_click(item, column)","title":"method LoggerTreeWidget.double_click"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggertreewidgetenable_all_levels","text":"enable_all_levels(pos)","title":"method LoggerTreeWidget.enable_all_levels"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggertreewidgetenable_everything","text":"enable_everything()","title":"method LoggerTreeWidget.enable_everything"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggertreewidgetregister_logger","text":"register_logger(full_name)","title":"method LoggerTreeWidget.register_logger"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggertreewidgetregister_loggers","text":"register_loggers(loggers)","title":"method LoggerTreeWidget.register_loggers"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggertreewidgetselect_all","text":"select_all()","title":"method LoggerTreeWidget.select_all"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggertreewidgetselect_only","text":"select_only(pos)","title":"method LoggerTreeWidget.select_only"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggertreewidgetselection_changed","text":"selection_changed()","title":"method LoggerTreeWidget.selection_changed"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggertreewidgetset_levels_of_children","text":"set_levels_of_children(item, state)","title":"method LoggerTreeWidget.set_levels_of_children"},{"location":"api/extras.log_monitor.log_filter_controls/#method-loggertreewidgetset_visible_loggers","text":"set_visible_loggers(visible_loggers)","title":"method LoggerTreeWidget.set_visible_loggers"},{"location":"api/extras.log_monitor.log_filter_controls/#class-profileselector","text":"","title":"class ProfileSelector"},{"location":"api/extras.log_monitor.log_filter_controls/#method-profileselector__init__","text":"__init__()","title":"method ProfileSelector.__init__"},{"location":"api/extras.log_monitor.log_filter_controls/#method-profileselectoreventfilter","text":"eventFilter(source, event)","title":"method ProfileSelector.eventFilter"},{"location":"api/extras.log_monitor.log_filter_controls/#method-profileselectoron_accept","text":"on_accept()","title":"method ProfileSelector.on_accept"},{"location":"api/extras.log_monitor.log_filter_controls/#method-profileselectoron_add","text":"on_add()","title":"method ProfileSelector.on_add"},{"location":"api/extras.log_monitor.log_filter_controls/#method-profileselectoron_cancel","text":"on_cancel()","title":"method ProfileSelector.on_cancel"},{"location":"api/extras.log_monitor.log_filter_controls/#method-profileselectoron_change","text":"on_change()","title":"method ProfileSelector.on_change"},{"location":"api/extras.log_monitor.log_filter_controls/#method-profileselectoron_remove","text":"on_remove()","title":"method ProfileSelector.on_remove"},{"location":"api/extras.log_monitor.log_filter_controls/#class-filtercontrols","text":"","title":"class FilterControls"},{"location":"api/extras.log_monitor.log_filter_controls/#method-filtercontrols__init__","text":"__init__(table)","title":"method FilterControls.__init__"},{"location":"api/extras.log_monitor.log_filter_controls/#method-filtercontrolsadd_profile","text":"add_profile(name)","title":"method FilterControls.add_profile"},{"location":"api/extras.log_monitor.log_filter_controls/#method-filtercontrolschange_profile","text":"change_profile(profile_name)","title":"method FilterControls.change_profile"},{"location":"api/extras.log_monitor.log_filter_controls/#method-filtercontrolscolumns_changed","text":"columns_changed()","title":"method FilterControls.columns_changed"},{"location":"api/extras.log_monitor.log_filter_controls/#method-filtercontrolsremove_profile","text":"remove_profile(name)","title":"method FilterControls.remove_profile"},{"location":"api/extras.log_monitor.log_filter_controls/#method-filtercontrolssave_settings","text":"save_settings()","title":"method FilterControls.save_settings"},{"location":"api/extras.log_monitor.log_filter_controls/#method-filtercontrolsupdate_filter","text":"update_filter() This file was automatically generated via lazydocs .","title":"method FilterControls.update_filter"},{"location":"api/extras.log_monitor.log_profile/","text":"module extras.log_monitor.log_profile Global Variables session_start_time default_columns class Column method Column.__init__ __init__(title=None, query=None, visible=True, width=0) method Column.get_data get_data() method Column.set_data set_data(data) method Column.set_visibility set_visibility(visible) class LogProfile method LogProfile.__init__ __init__() property LogProfile.column_data property LogProfile.visible_columns method LogProfile.build_query build_query(row_count) method LogProfile.get_log_level_column get_log_level_column() method LogProfile.set_columns set_columns(column_data) method LogProfile.set_filter set_filter(filt) This file was automatically generated via lazydocs .","title":"Extras.log monitor.log profile"},{"location":"api/extras.log_monitor.log_profile/#module-extraslog_monitorlog_profile","text":"","title":"module extras.log_monitor.log_profile"},{"location":"api/extras.log_monitor.log_profile/#global-variables","text":"session_start_time default_columns","title":"Global Variables"},{"location":"api/extras.log_monitor.log_profile/#class-column","text":"","title":"class Column"},{"location":"api/extras.log_monitor.log_profile/#method-column__init__","text":"__init__(title=None, query=None, visible=True, width=0)","title":"method Column.__init__"},{"location":"api/extras.log_monitor.log_profile/#method-columnget_data","text":"get_data()","title":"method Column.get_data"},{"location":"api/extras.log_monitor.log_profile/#method-columnset_data","text":"set_data(data)","title":"method Column.set_data"},{"location":"api/extras.log_monitor.log_profile/#method-columnset_visibility","text":"set_visibility(visible)","title":"method Column.set_visibility"},{"location":"api/extras.log_monitor.log_profile/#class-logprofile","text":"","title":"class LogProfile"},{"location":"api/extras.log_monitor.log_profile/#method-logprofile__init__","text":"__init__()","title":"method LogProfile.__init__"},{"location":"api/extras.log_monitor.log_profile/#property-logprofilecolumn_data","text":"","title":"property LogProfile.column_data"},{"location":"api/extras.log_monitor.log_profile/#property-logprofilevisible_columns","text":"","title":"property LogProfile.visible_columns"},{"location":"api/extras.log_monitor.log_profile/#method-logprofilebuild_query","text":"build_query(row_count)","title":"method LogProfile.build_query"},{"location":"api/extras.log_monitor.log_profile/#method-logprofileget_log_level_column","text":"get_log_level_column()","title":"method LogProfile.get_log_level_column"},{"location":"api/extras.log_monitor.log_profile/#method-logprofileset_columns","text":"set_columns(column_data)","title":"method LogProfile.set_columns"},{"location":"api/extras.log_monitor.log_profile/#method-logprofileset_filter","text":"set_filter(filt) This file was automatically generated via lazydocs .","title":"method LogProfile.set_filter"},{"location":"api/extras.log_monitor.log_table_view/","text":"module extras.log_monitor.log_table_view Global Variables TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 db_conn_name session_start_time class LogDbModel method LogDbModel.__init__ __init__(parent=None) method LogDbModel.data data(index, role=PySide2.QtCore.Qt.ItemDataRole.DisplayRole) class LogTableView method LogTableView.__init__ __init__() method LogTableView.attempt_refresh attempt_refresh() method LogTableView.eventFilter eventFilter(object, event) method LogTableView.header_menu header_menu() method LogTableView.mouse_released mouse_released() method LogTableView.refresh refresh() method LogTableView.schedule_refresh schedule_refresh() method LogTableView.set_columns set_columns(columns) method LogTableView.set_filter set_filter(filt) This file was automatically generated via lazydocs .","title":"Extras.log monitor.log table view"},{"location":"api/extras.log_monitor.log_table_view/#module-extraslog_monitorlog_table_view","text":"","title":"module extras.log_monitor.log_table_view"},{"location":"api/extras.log_monitor.log_table_view/#global-variables","text":"TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 db_conn_name session_start_time","title":"Global Variables"},{"location":"api/extras.log_monitor.log_table_view/#class-logdbmodel","text":"","title":"class LogDbModel"},{"location":"api/extras.log_monitor.log_table_view/#method-logdbmodel__init__","text":"__init__(parent=None)","title":"method LogDbModel.__init__"},{"location":"api/extras.log_monitor.log_table_view/#method-logdbmodeldata","text":"data(index, role=PySide2.QtCore.Qt.ItemDataRole.DisplayRole)","title":"method LogDbModel.data"},{"location":"api/extras.log_monitor.log_table_view/#class-logtableview","text":"","title":"class LogTableView"},{"location":"api/extras.log_monitor.log_table_view/#method-logtableview__init__","text":"__init__()","title":"method LogTableView.__init__"},{"location":"api/extras.log_monitor.log_table_view/#method-logtableviewattempt_refresh","text":"attempt_refresh()","title":"method LogTableView.attempt_refresh"},{"location":"api/extras.log_monitor.log_table_view/#method-logtablevieweventfilter","text":"eventFilter(object, event)","title":"method LogTableView.eventFilter"},{"location":"api/extras.log_monitor.log_table_view/#method-logtableviewheader_menu","text":"header_menu()","title":"method LogTableView.header_menu"},{"location":"api/extras.log_monitor.log_table_view/#method-logtableviewmouse_released","text":"mouse_released()","title":"method LogTableView.mouse_released"},{"location":"api/extras.log_monitor.log_table_view/#method-logtableviewrefresh","text":"refresh()","title":"method LogTableView.refresh"},{"location":"api/extras.log_monitor.log_table_view/#method-logtableviewschedule_refresh","text":"schedule_refresh()","title":"method LogTableView.schedule_refresh"},{"location":"api/extras.log_monitor.log_table_view/#method-logtableviewset_columns","text":"set_columns(columns)","title":"method LogTableView.set_columns"},{"location":"api/extras.log_monitor.log_table_view/#method-logtableviewset_filter","text":"set_filter(filt) This file was automatically generated via lazydocs .","title":"method LogTableView.set_filter"},{"location":"api/extras.log_monitor.log_widget/","text":"module extras.log_monitor.log_widget Global Variables TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 db_conn_name command_palette_available class LogMonitorWidget method LogMonitorWidget.__init__ __init__(parent=None) method LogMonitorWidget.open_profile_prompt open_profile_prompt() method LogMonitorWidget.query_existing_loggers query_existing_loggers() class LogMonitorDockWidget method LogMonitorDockWidget.__init__ __init__(parent=None, shortcut='Ctrl+L') method LogMonitorDockWidget.adjust_size adjust_size() method LogMonitorDockWidget.toggleViewAction toggleViewAction() class LogMonitorDropdown method LogMonitorDropdown.__init__ __init__(parent=None, shortcut='`') method LogMonitorDropdown.center_on_parent center_on_parent() method LogMonitorDropdown.eventFilter eventFilter(source: PySide2.QtCore.QObject, event: PySide2.QtCore.QEvent) \u2192 bool method LogMonitorDropdown.toggleViewAction toggleViewAction() method LogMonitorDropdown.toggle_view toggle_view() This file was automatically generated via lazydocs .","title":"Extras.log monitor.log widget"},{"location":"api/extras.log_monitor.log_widget/#module-extraslog_monitorlog_widget","text":"","title":"module extras.log_monitor.log_widget"},{"location":"api/extras.log_monitor.log_widget/#global-variables","text":"TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 db_conn_name command_palette_available","title":"Global Variables"},{"location":"api/extras.log_monitor.log_widget/#class-logmonitorwidget","text":"","title":"class LogMonitorWidget"},{"location":"api/extras.log_monitor.log_widget/#method-logmonitorwidget__init__","text":"__init__(parent=None)","title":"method LogMonitorWidget.__init__"},{"location":"api/extras.log_monitor.log_widget/#method-logmonitorwidgetopen_profile_prompt","text":"open_profile_prompt()","title":"method LogMonitorWidget.open_profile_prompt"},{"location":"api/extras.log_monitor.log_widget/#method-logmonitorwidgetquery_existing_loggers","text":"query_existing_loggers()","title":"method LogMonitorWidget.query_existing_loggers"},{"location":"api/extras.log_monitor.log_widget/#class-logmonitordockwidget","text":"","title":"class LogMonitorDockWidget"},{"location":"api/extras.log_monitor.log_widget/#method-logmonitordockwidget__init__","text":"__init__(parent=None, shortcut='Ctrl+L')","title":"method LogMonitorDockWidget.__init__"},{"location":"api/extras.log_monitor.log_widget/#method-logmonitordockwidgetadjust_size","text":"adjust_size()","title":"method LogMonitorDockWidget.adjust_size"},{"location":"api/extras.log_monitor.log_widget/#method-logmonitordockwidgettoggleviewaction","text":"toggleViewAction()","title":"method LogMonitorDockWidget.toggleViewAction"},{"location":"api/extras.log_monitor.log_widget/#class-logmonitordropdown","text":"","title":"class LogMonitorDropdown"},{"location":"api/extras.log_monitor.log_widget/#method-logmonitordropdown__init__","text":"__init__(parent=None, shortcut='`')","title":"method LogMonitorDropdown.__init__"},{"location":"api/extras.log_monitor.log_widget/#method-logmonitordropdowncenter_on_parent","text":"center_on_parent()","title":"method LogMonitorDropdown.center_on_parent"},{"location":"api/extras.log_monitor.log_widget/#method-logmonitordropdowneventfilter","text":"eventFilter(source: PySide2.QtCore.QObject, event: PySide2.QtCore.QEvent) \u2192 bool","title":"method LogMonitorDropdown.eventFilter"},{"location":"api/extras.log_monitor.log_widget/#method-logmonitordropdowntoggleviewaction","text":"toggleViewAction()","title":"method LogMonitorDropdown.toggleViewAction"},{"location":"api/extras.log_monitor.log_widget/#method-logmonitordropdowntoggle_view","text":"toggle_view() This file was automatically generated via lazydocs .","title":"method LogMonitorDropdown.toggle_view"},{"location":"api/extras.log_monitor/","text":"module extras.log_monitor Global Variables log_filter_controls log_profile log_database_handler log_table_view log_widget db_path exception_logger_name function install install( database_name='/home/daelon/projects/qtstrap/log.db', install_excepthook=True ) This file was automatically generated via lazydocs .","title":"Extras.log monitor"},{"location":"api/extras.log_monitor/#module-extraslog_monitor","text":"","title":"module extras.log_monitor"},{"location":"api/extras.log_monitor/#global-variables","text":"log_filter_controls log_profile log_database_handler log_table_view log_widget db_path exception_logger_name","title":"Global Variables"},{"location":"api/extras.log_monitor/#function-install","text":"install( database_name='/home/daelon/projects/qtstrap/log.db', install_excepthook=True ) This file was automatically generated via lazydocs .","title":"function install"},{"location":"api/extras/","text":"module extras This file was automatically generated via lazydocs .","title":"Extras"},{"location":"api/extras/#module-extras","text":"This file was automatically generated via lazydocs .","title":"module extras"},{"location":"api/extras.style.colors/","text":"module extras.style.colors class colors class qcolors This file was automatically generated via lazydocs .","title":"Extras.style.colors"},{"location":"api/extras.style.colors/#module-extrasstylecolors","text":"","title":"module extras.style.colors"},{"location":"api/extras.style.colors/#class-colors","text":"","title":"class colors"},{"location":"api/extras.style.colors/#class-qcolors","text":"This file was automatically generated via lazydocs .","title":"class qcolors"},{"location":"api/extras.style.dark_palette/","text":"module extras.style.dark_palette Global Variables TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 function install_dark_palette install_dark_palette(app) This file was automatically generated via lazydocs .","title":"Extras.style.dark palette"},{"location":"api/extras.style.dark_palette/#module-extrasstyledark_palette","text":"","title":"module extras.style.dark_palette"},{"location":"api/extras.style.dark_palette/#global-variables","text":"TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6","title":"Global Variables"},{"location":"api/extras.style.dark_palette/#function-install_dark_palette","text":"install_dark_palette(app) This file was automatically generated via lazydocs .","title":"function install_dark_palette"},{"location":"api/extras.style/","text":"module extras.style Global Variables dark_palette themes This file was automatically generated via lazydocs .","title":"Extras.style"},{"location":"api/extras.style/#module-extrasstyle","text":"","title":"module extras.style"},{"location":"api/extras.style/#global-variables","text":"dark_palette themes This file was automatically generated via lazydocs .","title":"Global Variables"},{"location":"api/extras.style.themes/","text":"module extras.style.themes Global Variables TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 function dark dark() \u2192 QPalette function light light() \u2192 QPalette function apply_theme apply_theme(theme, widget) This file was automatically generated via lazydocs .","title":"Extras.style.themes"},{"location":"api/extras.style.themes/#module-extrasstylethemes","text":"","title":"module extras.style.themes"},{"location":"api/extras.style.themes/#global-variables","text":"TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6","title":"Global Variables"},{"location":"api/extras.style.themes/#function-dark","text":"dark() \u2192 QPalette","title":"function dark"},{"location":"api/extras.style.themes/#function-light","text":"light() \u2192 QPalette","title":"function light"},{"location":"api/extras.style.themes/#function-apply_theme","text":"apply_theme(theme, widget) This file was automatically generated via lazydocs .","title":"function apply_theme"},{"location":"api/optional/","text":"module optional This file was automatically generated via lazydocs .","title":"Optional"},{"location":"api/optional/#module-optional","text":"This file was automatically generated via lazydocs .","title":"module optional"},{"location":"api/options/","text":"module options class OPTIONS This file was automatically generated via lazydocs .","title":"Options"},{"location":"api/options/#module-options","text":"","title":"module options"},{"location":"api/options/#class-options","text":"This file was automatically generated via lazydocs .","title":"class OPTIONS"},{"location":"api/overview/","text":"API Overview Modules experimental extras extras.code_editor extras.code_editor.code_editor extras.code_editor.code_line extras.code_editor.highlighters extras.code_editor.highlighters.python extras.command_palette extras.command_palette.command_palette extras.log_monitor extras.log_monitor.log_database_handler extras.log_monitor.log_filter_controls extras.log_monitor.log_profile extras.log_monitor.log_table_view extras.log_monitor.log_widget extras.style extras.style.colors extras.style.dark_palette extras.style.themes optional options utils utils.adapter utils.call_later utils.defer utils.drag_and_drop utils.get_ip utils.signals utils.singleton utils.string_builder utils.timestamp utils.trace utils.utils widgets widgets.buttons widgets.labeledit widgets.layouts widgets.line_widgets widgets.link_label widgets.persistent_tab_widget widgets.persistent_widgets widgets.toggle widgets.toolbar Classes code_editor.CodeEditor code_line.CodeLine python.PythonHighlighter : Syntax highlighter for the Python language. command_palette.Command command_palette.CommandCompleter command_palette.CommandModel command_palette.CommandRegistry command_palette.PopupDelegate log_database_handler.DatabaseHandler log_filter_controls.FilterControls log_filter_controls.LoggerDelegate log_filter_controls.LoggerTreeWidget log_filter_controls.LoggerTreeWidgetItem log_filter_controls.ProfileSelector log_profile.Column log_profile.LogProfile log_table_view.LogDbModel log_table_view.LogTableView log_widget.LogMonitorDockWidget log_widget.LogMonitorDropdown log_widget.LogMonitorWidget colors.colors colors.qcolors options.OPTIONS adapter.Adapter : A signal adapter that helps create disposable connections between objects. defer.Defer : A context manager that emulates the defer keyword from other languages. drag_and_drop.PreviewDrag signals.SignalBlocker : A context manager that blocks the signals of the provided widget. string_builder.Builder : Utility class for incrementally building strings. timestamp.TimeStamp : A TimeStamp object that can be used to track the time since it was created. buttons.ConfirmToggleButton buttons.IconToggleButton buttons.MenuButton buttons.StateButton labeledit.LabelEdit layouts.CFormLayout layouts.CGridLayout layouts.CHBoxLayout layouts.CScrollArea layouts.CSplitter layouts.CVBoxLayout layouts.ContextLayout layouts.ContextLayoutBase layouts.PersistentCScrollArea layouts.PersistentCSplitter line_widgets.HLine line_widgets.VLine link_label.LinkLabel persistent_tab_widget.PersistentTabWidget persistent_widgets.PersistentCheckBox persistent_widgets.PersistentCheckableAction persistent_widgets.PersistentComboBox persistent_widgets.PersistentLineEdit persistent_widgets.PersistentListWidget persistent_widgets.PersistentPlainTextEdit persistent_widgets.PersistentTextEdit persistent_widgets.PersistentTreeWidget toggle.AnimatedToggle toggle.PersistentAnimatedToggle toggle.PersistentToggle toggle.Toggle toolbar.BaseToolbar Functions python.format : Return a QTextCharFormat with the given attributes. python.get_style command_palette.get_color log_monitor.install log_filter_controls.get_color dark_palette.install_dark_palette themes.apply_theme themes.dark themes.light call_later.call_later : call the given function after a specified delay drag_and_drop.accepts_file_drops : Decorator that enables drag-and-drop on a QWidget. drag_and_drop.draggable get_ip.get_ip : Get the current machine's IPv4 address. singleton.singleton : Class decorator that only allows one instance to be created. timestamp.time_since : Calculate the elapsed time since the given TimeStamp or time value. trace.out : The print function used by the trace decorator. trace.trace : A decorator that logs registration, execution, and completion times of a function. utils.disable_children : Recursively walk the provided thing and disable all of its widget children. utils.enable_children : Recursively walk the provided thing and enable all of its widget children. utils.get_children : Recursively visit all the children of the specified object and collect them in a list. utils.print_children : Recursively visit all the children of the specified object and print them. utils.set_font_options : Set the QFont options of the specified object. This file was automatically generated via lazydocs .","title":"Overview"},{"location":"api/overview/#api-overview","text":"","title":"API Overview"},{"location":"api/overview/#modules","text":"experimental extras extras.code_editor extras.code_editor.code_editor extras.code_editor.code_line extras.code_editor.highlighters extras.code_editor.highlighters.python extras.command_palette extras.command_palette.command_palette extras.log_monitor extras.log_monitor.log_database_handler extras.log_monitor.log_filter_controls extras.log_monitor.log_profile extras.log_monitor.log_table_view extras.log_monitor.log_widget extras.style extras.style.colors extras.style.dark_palette extras.style.themes optional options utils utils.adapter utils.call_later utils.defer utils.drag_and_drop utils.get_ip utils.signals utils.singleton utils.string_builder utils.timestamp utils.trace utils.utils widgets widgets.buttons widgets.labeledit widgets.layouts widgets.line_widgets widgets.link_label widgets.persistent_tab_widget widgets.persistent_widgets widgets.toggle widgets.toolbar","title":"Modules"},{"location":"api/overview/#classes","text":"code_editor.CodeEditor code_line.CodeLine python.PythonHighlighter : Syntax highlighter for the Python language. command_palette.Command command_palette.CommandCompleter command_palette.CommandModel command_palette.CommandRegistry command_palette.PopupDelegate log_database_handler.DatabaseHandler log_filter_controls.FilterControls log_filter_controls.LoggerDelegate log_filter_controls.LoggerTreeWidget log_filter_controls.LoggerTreeWidgetItem log_filter_controls.ProfileSelector log_profile.Column log_profile.LogProfile log_table_view.LogDbModel log_table_view.LogTableView log_widget.LogMonitorDockWidget log_widget.LogMonitorDropdown log_widget.LogMonitorWidget colors.colors colors.qcolors options.OPTIONS adapter.Adapter : A signal adapter that helps create disposable connections between objects. defer.Defer : A context manager that emulates the defer keyword from other languages. drag_and_drop.PreviewDrag signals.SignalBlocker : A context manager that blocks the signals of the provided widget. string_builder.Builder : Utility class for incrementally building strings. timestamp.TimeStamp : A TimeStamp object that can be used to track the time since it was created. buttons.ConfirmToggleButton buttons.IconToggleButton buttons.MenuButton buttons.StateButton labeledit.LabelEdit layouts.CFormLayout layouts.CGridLayout layouts.CHBoxLayout layouts.CScrollArea layouts.CSplitter layouts.CVBoxLayout layouts.ContextLayout layouts.ContextLayoutBase layouts.PersistentCScrollArea layouts.PersistentCSplitter line_widgets.HLine line_widgets.VLine link_label.LinkLabel persistent_tab_widget.PersistentTabWidget persistent_widgets.PersistentCheckBox persistent_widgets.PersistentCheckableAction persistent_widgets.PersistentComboBox persistent_widgets.PersistentLineEdit persistent_widgets.PersistentListWidget persistent_widgets.PersistentPlainTextEdit persistent_widgets.PersistentTextEdit persistent_widgets.PersistentTreeWidget toggle.AnimatedToggle toggle.PersistentAnimatedToggle toggle.PersistentToggle toggle.Toggle toolbar.BaseToolbar","title":"Classes"},{"location":"api/overview/#functions","text":"python.format : Return a QTextCharFormat with the given attributes. python.get_style command_palette.get_color log_monitor.install log_filter_controls.get_color dark_palette.install_dark_palette themes.apply_theme themes.dark themes.light call_later.call_later : call the given function after a specified delay drag_and_drop.accepts_file_drops : Decorator that enables drag-and-drop on a QWidget. drag_and_drop.draggable get_ip.get_ip : Get the current machine's IPv4 address. singleton.singleton : Class decorator that only allows one instance to be created. timestamp.time_since : Calculate the elapsed time since the given TimeStamp or time value. trace.out : The print function used by the trace decorator. trace.trace : A decorator that logs registration, execution, and completion times of a function. utils.disable_children : Recursively walk the provided thing and disable all of its widget children. utils.enable_children : Recursively walk the provided thing and enable all of its widget children. utils.get_children : Recursively visit all the children of the specified object and collect them in a list. utils.print_children : Recursively visit all the children of the specified object and print them. utils.set_font_options : Set the QFont options of the specified object. This file was automatically generated via lazydocs .","title":"Functions"},{"location":"api/settings/","text":"module settings function uncache uncache(exclude) Remove package modules from cache except excluded ones. On next import they will be reloaded. Args: exclude (iter ): Sequence of module paths. This file was automatically generated via lazydocs .","title":"Settings"},{"location":"api/settings/#module-settings","text":"","title":"module settings"},{"location":"api/settings/#function-uncache","text":"uncache(exclude) Remove package modules from cache except excluded ones. On next import they will be reloaded. Args: exclude (iter ): Sequence of module paths. This file was automatically generated via lazydocs .","title":"function uncache"},{"location":"api/utils.adapter/","text":"module utils.adapter class Adapter A signal adapter that helps create disposable connections between objects. A signal-based interface can be defined using an Adapter. Passing an existing Adapter when creating a new Adapter will automatically link all of the existing adapter's signals to the same-named signals on the new Adapter. This will allow some other object to connect to these signals for whatever purpose, and then simply delete the new Adapter object when it now longer wants to recieve signals. Technically, Qt Signals already have a .disconnect() method, but I've never gotten it work reliably. Using an Adapter essentially gives you a nuclear .disconnect(). method Adapter.__init__ __init__(other=None) method Adapter.adapter adapter() method Adapter.kill kill() This file was automatically generated via lazydocs .","title":"Utils.adapter"},{"location":"api/utils.adapter/#module-utilsadapter","text":"","title":"module utils.adapter"},{"location":"api/utils.adapter/#class-adapter","text":"A signal adapter that helps create disposable connections between objects. A signal-based interface can be defined using an Adapter. Passing an existing Adapter when creating a new Adapter will automatically link all of the existing adapter's signals to the same-named signals on the new Adapter. This will allow some other object to connect to these signals for whatever purpose, and then simply delete the new Adapter object when it now longer wants to recieve signals. Technically, Qt Signals already have a .disconnect() method, but I've never gotten it work reliably. Using an Adapter essentially gives you a nuclear .disconnect().","title":"class Adapter"},{"location":"api/utils.adapter/#method-adapter__init__","text":"__init__(other=None)","title":"method Adapter.__init__"},{"location":"api/utils.adapter/#method-adapteradapter","text":"adapter()","title":"method Adapter.adapter"},{"location":"api/utils.adapter/#method-adapterkill","text":"kill() This file was automatically generated via lazydocs .","title":"method Adapter.kill"},{"location":"api/utils.call_later/","text":"module utils.call_later function call_later call_later(what, msec: int = 1) call the given function after a specified delay This file was automatically generated via lazydocs .","title":"Utils.call later"},{"location":"api/utils.call_later/#module-utilscall_later","text":"","title":"module utils.call_later"},{"location":"api/utils.call_later/#function-call_later","text":"call_later(what, msec: int = 1) call the given function after a specified delay This file was automatically generated via lazydocs .","title":"function call_later"},{"location":"api/utils.decorators/","text":"module utils.decorators function trace trace(func) This file was automatically generated via lazydocs .","title":"Utils.decorators"},{"location":"api/utils.decorators/#module-utilsdecorators","text":"","title":"module utils.decorators"},{"location":"api/utils.decorators/#function-trace","text":"trace(func) This file was automatically generated via lazydocs .","title":"function trace"},{"location":"api/utils.defer/","text":"module utils.defer class Defer A context manager that emulates the defer keyword from other languages. The deferred thing can be any callable, and arbitrary args and kwargs will be preserved and passed to the thing during exit (). method Defer.__init__ __init__(thing, *args, **kwargs) This file was automatically generated via lazydocs .","title":"Utils.defer"},{"location":"api/utils.defer/#module-utilsdefer","text":"","title":"module utils.defer"},{"location":"api/utils.defer/#class-defer","text":"A context manager that emulates the defer keyword from other languages. The deferred thing can be any callable, and arbitrary args and kwargs will be preserved and passed to the thing during exit ().","title":"class Defer"},{"location":"api/utils.defer/#method-defer__init__","text":"__init__(thing, *args, **kwargs) This file was automatically generated via lazydocs .","title":"method Defer.__init__"},{"location":"api/utils.drag_and_drop/","text":"module utils.drag_and_drop Global Variables TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 function accepts_file_drops accepts_file_drops(extensions: 'str | [str]') Decorator that enables drag-and-drop on a QWidget. Accepts a str or a list of strings of the valid file extensions. function draggable draggable(target) class PreviewDrag method PreviewDrag.__init__ __init__(source, mimedata=None) This file was automatically generated via lazydocs .","title":"Utils.drag and drop"},{"location":"api/utils.drag_and_drop/#module-utilsdrag_and_drop","text":"","title":"module utils.drag_and_drop"},{"location":"api/utils.drag_and_drop/#global-variables","text":"TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6","title":"Global Variables"},{"location":"api/utils.drag_and_drop/#function-accepts_file_drops","text":"accepts_file_drops(extensions: 'str | [str]') Decorator that enables drag-and-drop on a QWidget. Accepts a str or a list of strings of the valid file extensions.","title":"function accepts_file_drops"},{"location":"api/utils.drag_and_drop/#function-draggable","text":"draggable(target)","title":"function draggable"},{"location":"api/utils.drag_and_drop/#class-previewdrag","text":"","title":"class PreviewDrag"},{"location":"api/utils.drag_and_drop/#method-previewdrag__init__","text":"__init__(source, mimedata=None) This file was automatically generated via lazydocs .","title":"method PreviewDrag.__init__"},{"location":"api/utils.get_ip/","text":"module utils.get_ip function get_ip get_ip() Get the current machine's IPv4 address. This process is more complicated than it appears because of the possiblity of multiple arbitrary network interfaces. This file was automatically generated via lazydocs .","title":"Utils.get ip"},{"location":"api/utils.get_ip/#module-utilsget_ip","text":"","title":"module utils.get_ip"},{"location":"api/utils.get_ip/#function-get_ip","text":"get_ip() Get the current machine's IPv4 address. This process is more complicated than it appears because of the possiblity of multiple arbitrary network interfaces. This file was automatically generated via lazydocs .","title":"function get_ip"},{"location":"api/utils/","text":"module utils Global Variables TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 This file was automatically generated via lazydocs .","title":"Utils"},{"location":"api/utils/#module-utils","text":"","title":"module utils"},{"location":"api/utils/#global-variables","text":"TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 This file was automatically generated via lazydocs .","title":"Global Variables"},{"location":"api/utils.signals/","text":"module utils.signals class SignalBlocker A context manager that blocks the signals of the provided widget. The signals are unblocked at the end of the with block. method SignalBlocker.__init__ __init__(widget) This file was automatically generated via lazydocs .","title":"Utils.signals"},{"location":"api/utils.signals/#module-utilssignals","text":"","title":"module utils.signals"},{"location":"api/utils.signals/#class-signalblocker","text":"A context manager that blocks the signals of the provided widget. The signals are unblocked at the end of the with block.","title":"class SignalBlocker"},{"location":"api/utils.signals/#method-signalblocker__init__","text":"__init__(widget) This file was automatically generated via lazydocs .","title":"method SignalBlocker.__init__"},{"location":"api/utils.singleton/","text":"module utils.singleton function singleton singleton(class_) Class decorator that only allows one instance to be created. @singleton class Test: ... assert Test() is Test() # True This file was automatically generated via lazydocs .","title":"Utils.singleton"},{"location":"api/utils.singleton/#module-utilssingleton","text":"","title":"module utils.singleton"},{"location":"api/utils.singleton/#function-singleton","text":"singleton(class_) Class decorator that only allows one instance to be created. @singleton class Test: ... assert Test() is Test() # True This file was automatically generated via lazydocs .","title":"function singleton"},{"location":"api/utils.string_builder/","text":"module utils.string_builder class Builder Utility class for incrementally building strings. method Builder.__init__ __init__( out: typing.Optional[typing.Callable[[str], NoneType]] = None, indent: int = 4, endl: str = '\\n' ) method Builder.join join(base: str = '') method Builder.line line(string: str = '') This file was automatically generated via lazydocs .","title":"Utils.string builder"},{"location":"api/utils.string_builder/#module-utilsstring_builder","text":"","title":"module utils.string_builder"},{"location":"api/utils.string_builder/#class-builder","text":"Utility class for incrementally building strings.","title":"class Builder"},{"location":"api/utils.string_builder/#method-builder__init__","text":"__init__( out: typing.Optional[typing.Callable[[str], NoneType]] = None, indent: int = 4, endl: str = '\\n' )","title":"method Builder.__init__"},{"location":"api/utils.string_builder/#method-builderjoin","text":"join(base: str = '')","title":"method Builder.join"},{"location":"api/utils.string_builder/#method-builderline","text":"line(string: str = '') This file was automatically generated via lazydocs .","title":"method Builder.line"},{"location":"api/utils.timestamp/","text":"module utils.timestamp function time_since time_since(timestamp: utils.timestamp.TimeStamp | float) \u2192 float Calculate the elapsed time since the given TimeStamp or time value. class TimeStamp A TimeStamp object that can be used to track the time since it was created. method TimeStamp.__init__ __init__() \u2192 None method TimeStamp.time_since time_since() \u2192 float Calculate the elapsed time since this TimeStamp was created or updated. method TimeStamp.update update() \u2192 None Update the TimeStamp to the current time. This file was automatically generated via lazydocs .","title":"Utils.timestamp"},{"location":"api/utils.timestamp/#module-utilstimestamp","text":"","title":"module utils.timestamp"},{"location":"api/utils.timestamp/#function-time_since","text":"time_since(timestamp: utils.timestamp.TimeStamp | float) \u2192 float Calculate the elapsed time since the given TimeStamp or time value.","title":"function time_since"},{"location":"api/utils.timestamp/#class-timestamp","text":"A TimeStamp object that can be used to track the time since it was created.","title":"class TimeStamp"},{"location":"api/utils.timestamp/#method-timestamp__init__","text":"__init__() \u2192 None","title":"method TimeStamp.__init__"},{"location":"api/utils.timestamp/#method-timestamptime_since","text":"time_since() \u2192 float Calculate the elapsed time since this TimeStamp was created or updated.","title":"method TimeStamp.time_since"},{"location":"api/utils.timestamp/#method-timestampupdate","text":"update() \u2192 None Update the TimeStamp to the current time. This file was automatically generated via lazydocs .","title":"method TimeStamp.update"},{"location":"api/utils.trace/","text":"module utils.trace Global Variables start_time function out out(*args) The print function used by the trace decorator. Overwrite this function to change the output behavior, eg to use logging instead of print. function trace trace(func) A decorator that logs registration, execution, and completion times of a function. This file was automatically generated via lazydocs .","title":"Utils.trace"},{"location":"api/utils.trace/#module-utilstrace","text":"","title":"module utils.trace"},{"location":"api/utils.trace/#global-variables","text":"start_time","title":"Global Variables"},{"location":"api/utils.trace/#function-out","text":"out(*args) The print function used by the trace decorator. Overwrite this function to change the output behavior, eg to use logging instead of print.","title":"function out"},{"location":"api/utils.trace/#function-trace","text":"trace(func) A decorator that logs registration, execution, and completion times of a function. This file was automatically generated via lazydocs .","title":"function trace"},{"location":"api/utils.utils/","text":"module utils.utils Global Variables TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 function enable_children enable_children(thing: PySide2.QtCore.QObject) \u2192 None Recursively walk the provided thing and enable all of its widget children. function disable_children disable_children(thing: PySide2.QtCore.QObject) \u2192 None Recursively walk the provided thing and disable all of its widget children. function get_children get_children(obj: PySide2.QtCore.QObject) \u2192 list Recursively visit all the children of the specified object and collect them in a list. function print_children print_children(obj: PySide2.QtCore.QObject, prefix='') \u2192 None Recursively visit all the children of the specified object and print them. function set_font_options set_font_options(obj: PySide2.QtCore.QObject, options={}) Set the QFont options of the specified object. Font options are specified by providing the name of the QFont setter method. Example: set_font_options(widget, {'setPointSize': 12, 'setBold': True}) is equivalent to writing: font = widget.font() font.setPointSize(12) font.setBold(True) widget.setFont(font) This file was automatically generated via lazydocs .","title":"Utils.utils"},{"location":"api/utils.utils/#module-utilsutils","text":"","title":"module utils.utils"},{"location":"api/utils.utils/#global-variables","text":"TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6","title":"Global Variables"},{"location":"api/utils.utils/#function-enable_children","text":"enable_children(thing: PySide2.QtCore.QObject) \u2192 None Recursively walk the provided thing and enable all of its widget children.","title":"function enable_children"},{"location":"api/utils.utils/#function-disable_children","text":"disable_children(thing: PySide2.QtCore.QObject) \u2192 None Recursively walk the provided thing and disable all of its widget children.","title":"function disable_children"},{"location":"api/utils.utils/#function-get_children","text":"get_children(obj: PySide2.QtCore.QObject) \u2192 list Recursively visit all the children of the specified object and collect them in a list.","title":"function get_children"},{"location":"api/utils.utils/#function-print_children","text":"print_children(obj: PySide2.QtCore.QObject, prefix='') \u2192 None Recursively visit all the children of the specified object and print them.","title":"function print_children"},{"location":"api/utils.utils/#function-set_font_options","text":"set_font_options(obj: PySide2.QtCore.QObject, options={}) Set the QFont options of the specified object. Font options are specified by providing the name of the QFont setter method. Example: set_font_options(widget, {'setPointSize': 12, 'setBold': True}) is equivalent to writing: font = widget.font() font.setPointSize(12) font.setBold(True) widget.setFont(font) This file was automatically generated via lazydocs .","title":"function set_font_options"},{"location":"api/widgets.buttons/","text":"module widgets.buttons Global Variables TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 class StateButton method StateButton.__init__ __init__(*args, **kwargs) property StateButton.state method StateButton.next_state next_state() method StateButton.update_icon update_icon() class IconToggleButton method IconToggleButton.__init__ __init__(*args, **kwargs) method IconToggleButton.update_icon update_icon() class ConfirmToggleButton method ConfirmToggleButton.__init__ __init__(*args, **kwargs) property ConfirmToggleButton.state method ConfirmToggleButton.check check() method ConfirmToggleButton.confirm confirm() method ConfirmToggleButton.next_state next_state() method ConfirmToggleButton.uncheck uncheck() method ConfirmToggleButton.update_icon update_icon() class MenuButton method MenuButton.__init__ __init__(*args, **kwargs) method MenuButton.addAction addAction(*args, **kwargs) This file was automatically generated via lazydocs .","title":"Widgets.buttons"},{"location":"api/widgets.buttons/#module-widgetsbuttons","text":"","title":"module widgets.buttons"},{"location":"api/widgets.buttons/#global-variables","text":"TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6","title":"Global Variables"},{"location":"api/widgets.buttons/#class-statebutton","text":"","title":"class StateButton"},{"location":"api/widgets.buttons/#method-statebutton__init__","text":"__init__(*args, **kwargs)","title":"method StateButton.__init__"},{"location":"api/widgets.buttons/#property-statebuttonstate","text":"","title":"property StateButton.state"},{"location":"api/widgets.buttons/#method-statebuttonnext_state","text":"next_state()","title":"method StateButton.next_state"},{"location":"api/widgets.buttons/#method-statebuttonupdate_icon","text":"update_icon()","title":"method StateButton.update_icon"},{"location":"api/widgets.buttons/#class-icontogglebutton","text":"","title":"class IconToggleButton"},{"location":"api/widgets.buttons/#method-icontogglebutton__init__","text":"__init__(*args, **kwargs)","title":"method IconToggleButton.__init__"},{"location":"api/widgets.buttons/#method-icontogglebuttonupdate_icon","text":"update_icon()","title":"method IconToggleButton.update_icon"},{"location":"api/widgets.buttons/#class-confirmtogglebutton","text":"","title":"class ConfirmToggleButton"},{"location":"api/widgets.buttons/#method-confirmtogglebutton__init__","text":"__init__(*args, **kwargs)","title":"method ConfirmToggleButton.__init__"},{"location":"api/widgets.buttons/#property-confirmtogglebuttonstate","text":"","title":"property ConfirmToggleButton.state"},{"location":"api/widgets.buttons/#method-confirmtogglebuttoncheck","text":"check()","title":"method ConfirmToggleButton.check"},{"location":"api/widgets.buttons/#method-confirmtogglebuttonconfirm","text":"confirm()","title":"method ConfirmToggleButton.confirm"},{"location":"api/widgets.buttons/#method-confirmtogglebuttonnext_state","text":"next_state()","title":"method ConfirmToggleButton.next_state"},{"location":"api/widgets.buttons/#method-confirmtogglebuttonuncheck","text":"uncheck()","title":"method ConfirmToggleButton.uncheck"},{"location":"api/widgets.buttons/#method-confirmtogglebuttonupdate_icon","text":"update_icon()","title":"method ConfirmToggleButton.update_icon"},{"location":"api/widgets.buttons/#class-menubutton","text":"","title":"class MenuButton"},{"location":"api/widgets.buttons/#method-menubutton__init__","text":"__init__(*args, **kwargs)","title":"method MenuButton.__init__"},{"location":"api/widgets.buttons/#method-menubuttonaddaction","text":"addAction(*args, **kwargs) This file was automatically generated via lazydocs .","title":"method MenuButton.addAction"},{"location":"api/widgets.labeledit/","text":"module widgets.labeledit Global Variables TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 class LabelEdit method LabelEdit.__init__ __init__(text, *args, changed=None, **kwargs) method LabelEdit.accept accept() method LabelEdit.dismiss dismiss() method LabelEdit.eventFilter eventFilter(source, event) method LabelEdit.mouseDoubleClickEvent mouseDoubleClickEvent(event: PySide2.QtGui.QMouseEvent) \u2192 None method LabelEdit.setText setText(text) method LabelEdit.start_editing start_editing() method LabelEdit.text text() This file was automatically generated via lazydocs .","title":"Widgets.labeledit"},{"location":"api/widgets.labeledit/#module-widgetslabeledit","text":"","title":"module widgets.labeledit"},{"location":"api/widgets.labeledit/#global-variables","text":"TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6","title":"Global Variables"},{"location":"api/widgets.labeledit/#class-labeledit","text":"","title":"class LabelEdit"},{"location":"api/widgets.labeledit/#method-labeledit__init__","text":"__init__(text, *args, changed=None, **kwargs)","title":"method LabelEdit.__init__"},{"location":"api/widgets.labeledit/#method-labeleditaccept","text":"accept()","title":"method LabelEdit.accept"},{"location":"api/widgets.labeledit/#method-labeleditdismiss","text":"dismiss()","title":"method LabelEdit.dismiss"},{"location":"api/widgets.labeledit/#method-labelediteventfilter","text":"eventFilter(source, event)","title":"method LabelEdit.eventFilter"},{"location":"api/widgets.labeledit/#method-labeleditmousedoubleclickevent","text":"mouseDoubleClickEvent(event: PySide2.QtGui.QMouseEvent) \u2192 None","title":"method LabelEdit.mouseDoubleClickEvent"},{"location":"api/widgets.labeledit/#method-labeleditsettext","text":"setText(text)","title":"method LabelEdit.setText"},{"location":"api/widgets.labeledit/#method-labeleditstart_editing","text":"start_editing()","title":"method LabelEdit.start_editing"},{"location":"api/widgets.labeledit/#method-labeledittext","text":"text() This file was automatically generated via lazydocs .","title":"method LabelEdit.text"},{"location":"api/widgets.layouts/","text":"module widgets.layouts Global Variables alignments orientations class ContextLayoutBase method ContextLayoutBase.add add( item: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout], *args, **kwargs ) \u2192 PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout] class ContextLayout method ContextLayout.__init__ __init__( parent: PySide2.QtWidgets.QMainWindow | PySide2.QtWidgets.QSplitter | PySide2.QtWidgets.QWidget | widgets.layouts.ContextLayoutBase | None = None, stretch: int | None = None, margins: PySide2.QtCore.QMargins | tuple | int | None = None, align: typing.Optional[typing.Literal[PySide2.QtCore.Qt.AlignmentFlag.AlignLeft, PySide2.QtCore.Qt.AlignmentFlag.AlignRight, PySide2.QtCore.Qt.AlignmentFlag.AlignTop, PySide2.QtCore.Qt.AlignmentFlag.AlignBottom, PySide2.QtCore.Qt.AlignmentFlag.AlignCenter, 'left', 'l', 'right', 'r', 'top', 't', 'bottom', 'bot', 'b', 'center', 'c']] = None, **kwargs ) method ContextLayout.add add( item: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout], *args, **kwargs ) \u2192 PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout] method ContextLayout.form form(*args, **kwargs) method ContextLayout.grid grid(*args, **kwargs) method ContextLayout.hbox hbox(*args, **kwargs) method ContextLayout.scroll scroll(name: str | None = None, **kwargs) method ContextLayout.split split(name: str | None = None, **kwargs) method ContextLayout.vbox vbox(*args, **kwargs) class CVBoxLayout method CVBoxLayout.__init__ __init__( parent: PySide2.QtWidgets.QMainWindow | PySide2.QtWidgets.QSplitter | PySide2.QtWidgets.QWidget | widgets.layouts.ContextLayoutBase | None = None, stretch: int | None = None, margins: PySide2.QtCore.QMargins | tuple | int | None = None, align: typing.Optional[typing.Literal[PySide2.QtCore.Qt.AlignmentFlag.AlignLeft, PySide2.QtCore.Qt.AlignmentFlag.AlignRight, PySide2.QtCore.Qt.AlignmentFlag.AlignTop, PySide2.QtCore.Qt.AlignmentFlag.AlignBottom, PySide2.QtCore.Qt.AlignmentFlag.AlignCenter, 'left', 'l', 'right', 'r', 'top', 't', 'bottom', 'bot', 'b', 'center', 'c']] = None, **kwargs ) method CVBoxLayout.add add( item: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout], *args, **kwargs ) \u2192 PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout] method CVBoxLayout.form form(*args, **kwargs) method CVBoxLayout.grid grid(*args, **kwargs) method CVBoxLayout.hbox hbox(*args, **kwargs) method CVBoxLayout.scroll scroll(name: str | None = None, **kwargs) method CVBoxLayout.split split(name: str | None = None, **kwargs) method CVBoxLayout.vbox vbox(*args, **kwargs) class CHBoxLayout method CHBoxLayout.__init__ __init__( parent: PySide2.QtWidgets.QMainWindow | PySide2.QtWidgets.QSplitter | PySide2.QtWidgets.QWidget | widgets.layouts.ContextLayoutBase | None = None, stretch: int | None = None, margins: PySide2.QtCore.QMargins | tuple | int | None = None, align: typing.Optional[typing.Literal[PySide2.QtCore.Qt.AlignmentFlag.AlignLeft, PySide2.QtCore.Qt.AlignmentFlag.AlignRight, PySide2.QtCore.Qt.AlignmentFlag.AlignTop, PySide2.QtCore.Qt.AlignmentFlag.AlignBottom, PySide2.QtCore.Qt.AlignmentFlag.AlignCenter, 'left', 'l', 'right', 'r', 'top', 't', 'bottom', 'bot', 'b', 'center', 'c']] = None, **kwargs ) method CHBoxLayout.add add( item: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout], *args, **kwargs ) \u2192 PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout] method CHBoxLayout.form form(*args, **kwargs) method CHBoxLayout.grid grid(*args, **kwargs) method CHBoxLayout.hbox hbox(*args, **kwargs) method CHBoxLayout.scroll scroll(name: str | None = None, **kwargs) method CHBoxLayout.split split(name: str | None = None, **kwargs) method CHBoxLayout.vbox vbox(*args, **kwargs) class CGridLayout method CGridLayout.__init__ __init__( parent: PySide2.QtWidgets.QMainWindow | PySide2.QtWidgets.QSplitter | PySide2.QtWidgets.QWidget | widgets.layouts.ContextLayoutBase | None = None, stretch: int | None = None, margins: PySide2.QtCore.QMargins | tuple | int | None = None, align: typing.Optional[typing.Literal[PySide2.QtCore.Qt.AlignmentFlag.AlignLeft, PySide2.QtCore.Qt.AlignmentFlag.AlignRight, PySide2.QtCore.Qt.AlignmentFlag.AlignTop, PySide2.QtCore.Qt.AlignmentFlag.AlignBottom, PySide2.QtCore.Qt.AlignmentFlag.AlignCenter, 'left', 'l', 'right', 'r', 'top', 't', 'bottom', 'bot', 'b', 'center', 'c']] = None, **kwargs ) method CGridLayout.add add( item: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout], *args, **kwargs ) \u2192 PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout] method CGridLayout.addLayout addLayout( item: PySide2.QtWidgets.QLayout, row: int, column: int, row_span: int = 1, column_span: int = 1, rowSpan: int = 1, columnSpan: int = 1, **kwargs ) \u2192 None Change the function signature to allow using the spans as named params method CGridLayout.addWidget addWidget( item: PySide2.QtWidgets.QWidget, row: int, column: int, row_span: int = 1, column_span: int = 1, rowSpan: int = 1, columnSpan: int = 1, **kwargs ) \u2192 None Change the function signature to allow using the spans as named params method CGridLayout.form form(*args, **kwargs) method CGridLayout.grid grid(*args, **kwargs) method CGridLayout.hbox hbox(*args, **kwargs) method CGridLayout.scroll scroll(name: str | None = None, **kwargs) method CGridLayout.split split(name: str | None = None, **kwargs) method CGridLayout.vbox vbox(*args, **kwargs) class CFormLayout method CFormLayout.__init__ __init__( parent: PySide2.QtWidgets.QMainWindow | PySide2.QtWidgets.QSplitter | PySide2.QtWidgets.QWidget | widgets.layouts.ContextLayoutBase | None = None, stretch: int | None = None, margins: PySide2.QtCore.QMargins | tuple | int | None = None, align: typing.Optional[typing.Literal[PySide2.QtCore.Qt.AlignmentFlag.AlignLeft, PySide2.QtCore.Qt.AlignmentFlag.AlignRight, PySide2.QtCore.Qt.AlignmentFlag.AlignTop, PySide2.QtCore.Qt.AlignmentFlag.AlignBottom, PySide2.QtCore.Qt.AlignmentFlag.AlignCenter, 'left', 'l', 'right', 'r', 'top', 't', 'bottom', 'bot', 'b', 'center', 'c']] = None, **kwargs ) method CFormLayout.add add( item: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout], *args, **kwargs ) \u2192 PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout] method CFormLayout.form form(*args, **kwargs) method CFormLayout.grid grid(*args, **kwargs) method CFormLayout.hbox hbox(*args, **kwargs) method CFormLayout.scroll scroll(name: str | None = None, **kwargs) method CFormLayout.split split(name: str | None = None, **kwargs) method CFormLayout.vbox vbox(*args, **kwargs) class CSplitter method CSplitter.__init__ __init__( parent: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | widgets.layouts.ContextLayoutBase | None = None, margins: PySide2.QtCore.QMargins | tuple | int | None = None, orientation: typing.Optional[typing.Literal[PySide2.QtCore.Qt.Orientation.Horizontal, PySide2.QtCore.Qt.Orientation.Vertical, 'horizontal', 'h', 'vertical', 'v']] = None, **kwargs ) method CSplitter.add add( item: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout], stretch: int | None = None ) \u2192 PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout] class PersistentCSplitter method PersistentCSplitter.__init__ __init__( name: str, parent: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | widgets.layouts.ContextLayoutBase | None = None, **kwargs ) method PersistentCSplitter.add add( item: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout], stretch: int | None = None ) \u2192 PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout] method PersistentCSplitter.restore_state restore_state() class CScrollArea method CScrollArea.__init__ __init__( parent: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | widgets.layouts.ContextLayoutBase | None = None, margins: PySide2.QtCore.QMargins | tuple | int | None = None, orientation: typing.Optional[typing.Literal[PySide2.QtCore.Qt.Orientation.Horizontal, PySide2.QtCore.Qt.Orientation.Vertical, 'horizontal', 'h', 'vertical', 'v']] = None, **kwargs ) method CScrollArea.add add( item: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout], stretch: int = None ) \u2192 PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout] method CScrollArea.addLayout addLayout(*args, **kwargs) method CScrollArea.addWidget addWidget(*args, **kwargs) class PersistentCScrollArea method PersistentCScrollArea.__init__ __init__( name: str, parent: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | widgets.layouts.ContextLayoutBase | None = None, **kwargs ) method PersistentCScrollArea.add add( item: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout], *args, **kwargs ) \u2192 PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout] method PersistentCScrollArea.restore_state restore_state() method PersistentCScrollArea.scroll_to scroll_to(value: int) This file was automatically generated via lazydocs .","title":"Widgets.layouts"},{"location":"api/widgets.layouts/#module-widgetslayouts","text":"","title":"module widgets.layouts"},{"location":"api/widgets.layouts/#global-variables","text":"alignments orientations","title":"Global Variables"},{"location":"api/widgets.layouts/#class-contextlayoutbase","text":"","title":"class ContextLayoutBase"},{"location":"api/widgets.layouts/#method-contextlayoutbaseadd","text":"add( item: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout], *args, **kwargs ) \u2192 PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout]","title":"method ContextLayoutBase.add"},{"location":"api/widgets.layouts/#class-contextlayout","text":"","title":"class ContextLayout"},{"location":"api/widgets.layouts/#method-contextlayout__init__","text":"__init__( parent: PySide2.QtWidgets.QMainWindow | PySide2.QtWidgets.QSplitter | PySide2.QtWidgets.QWidget | widgets.layouts.ContextLayoutBase | None = None, stretch: int | None = None, margins: PySide2.QtCore.QMargins | tuple | int | None = None, align: typing.Optional[typing.Literal[PySide2.QtCore.Qt.AlignmentFlag.AlignLeft, PySide2.QtCore.Qt.AlignmentFlag.AlignRight, PySide2.QtCore.Qt.AlignmentFlag.AlignTop, PySide2.QtCore.Qt.AlignmentFlag.AlignBottom, PySide2.QtCore.Qt.AlignmentFlag.AlignCenter, 'left', 'l', 'right', 'r', 'top', 't', 'bottom', 'bot', 'b', 'center', 'c']] = None, **kwargs )","title":"method ContextLayout.__init__"},{"location":"api/widgets.layouts/#method-contextlayoutadd","text":"add( item: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout], *args, **kwargs ) \u2192 PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout]","title":"method ContextLayout.add"},{"location":"api/widgets.layouts/#method-contextlayoutform","text":"form(*args, **kwargs)","title":"method ContextLayout.form"},{"location":"api/widgets.layouts/#method-contextlayoutgrid","text":"grid(*args, **kwargs)","title":"method ContextLayout.grid"},{"location":"api/widgets.layouts/#method-contextlayouthbox","text":"hbox(*args, **kwargs)","title":"method ContextLayout.hbox"},{"location":"api/widgets.layouts/#method-contextlayoutscroll","text":"scroll(name: str | None = None, **kwargs)","title":"method ContextLayout.scroll"},{"location":"api/widgets.layouts/#method-contextlayoutsplit","text":"split(name: str | None = None, **kwargs)","title":"method ContextLayout.split"},{"location":"api/widgets.layouts/#method-contextlayoutvbox","text":"vbox(*args, **kwargs)","title":"method ContextLayout.vbox"},{"location":"api/widgets.layouts/#class-cvboxlayout","text":"","title":"class CVBoxLayout"},{"location":"api/widgets.layouts/#method-cvboxlayout__init__","text":"__init__( parent: PySide2.QtWidgets.QMainWindow | PySide2.QtWidgets.QSplitter | PySide2.QtWidgets.QWidget | widgets.layouts.ContextLayoutBase | None = None, stretch: int | None = None, margins: PySide2.QtCore.QMargins | tuple | int | None = None, align: typing.Optional[typing.Literal[PySide2.QtCore.Qt.AlignmentFlag.AlignLeft, PySide2.QtCore.Qt.AlignmentFlag.AlignRight, PySide2.QtCore.Qt.AlignmentFlag.AlignTop, PySide2.QtCore.Qt.AlignmentFlag.AlignBottom, PySide2.QtCore.Qt.AlignmentFlag.AlignCenter, 'left', 'l', 'right', 'r', 'top', 't', 'bottom', 'bot', 'b', 'center', 'c']] = None, **kwargs )","title":"method CVBoxLayout.__init__"},{"location":"api/widgets.layouts/#method-cvboxlayoutadd","text":"add( item: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout], *args, **kwargs ) \u2192 PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout]","title":"method CVBoxLayout.add"},{"location":"api/widgets.layouts/#method-cvboxlayoutform","text":"form(*args, **kwargs)","title":"method CVBoxLayout.form"},{"location":"api/widgets.layouts/#method-cvboxlayoutgrid","text":"grid(*args, **kwargs)","title":"method CVBoxLayout.grid"},{"location":"api/widgets.layouts/#method-cvboxlayouthbox","text":"hbox(*args, **kwargs)","title":"method CVBoxLayout.hbox"},{"location":"api/widgets.layouts/#method-cvboxlayoutscroll","text":"scroll(name: str | None = None, **kwargs)","title":"method CVBoxLayout.scroll"},{"location":"api/widgets.layouts/#method-cvboxlayoutsplit","text":"split(name: str | None = None, **kwargs)","title":"method CVBoxLayout.split"},{"location":"api/widgets.layouts/#method-cvboxlayoutvbox","text":"vbox(*args, **kwargs)","title":"method CVBoxLayout.vbox"},{"location":"api/widgets.layouts/#class-chboxlayout","text":"","title":"class CHBoxLayout"},{"location":"api/widgets.layouts/#method-chboxlayout__init__","text":"__init__( parent: PySide2.QtWidgets.QMainWindow | PySide2.QtWidgets.QSplitter | PySide2.QtWidgets.QWidget | widgets.layouts.ContextLayoutBase | None = None, stretch: int | None = None, margins: PySide2.QtCore.QMargins | tuple | int | None = None, align: typing.Optional[typing.Literal[PySide2.QtCore.Qt.AlignmentFlag.AlignLeft, PySide2.QtCore.Qt.AlignmentFlag.AlignRight, PySide2.QtCore.Qt.AlignmentFlag.AlignTop, PySide2.QtCore.Qt.AlignmentFlag.AlignBottom, PySide2.QtCore.Qt.AlignmentFlag.AlignCenter, 'left', 'l', 'right', 'r', 'top', 't', 'bottom', 'bot', 'b', 'center', 'c']] = None, **kwargs )","title":"method CHBoxLayout.__init__"},{"location":"api/widgets.layouts/#method-chboxlayoutadd","text":"add( item: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout], *args, **kwargs ) \u2192 PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout]","title":"method CHBoxLayout.add"},{"location":"api/widgets.layouts/#method-chboxlayoutform","text":"form(*args, **kwargs)","title":"method CHBoxLayout.form"},{"location":"api/widgets.layouts/#method-chboxlayoutgrid","text":"grid(*args, **kwargs)","title":"method CHBoxLayout.grid"},{"location":"api/widgets.layouts/#method-chboxlayouthbox","text":"hbox(*args, **kwargs)","title":"method CHBoxLayout.hbox"},{"location":"api/widgets.layouts/#method-chboxlayoutscroll","text":"scroll(name: str | None = None, **kwargs)","title":"method CHBoxLayout.scroll"},{"location":"api/widgets.layouts/#method-chboxlayoutsplit","text":"split(name: str | None = None, **kwargs)","title":"method CHBoxLayout.split"},{"location":"api/widgets.layouts/#method-chboxlayoutvbox","text":"vbox(*args, **kwargs)","title":"method CHBoxLayout.vbox"},{"location":"api/widgets.layouts/#class-cgridlayout","text":"","title":"class CGridLayout"},{"location":"api/widgets.layouts/#method-cgridlayout__init__","text":"__init__( parent: PySide2.QtWidgets.QMainWindow | PySide2.QtWidgets.QSplitter | PySide2.QtWidgets.QWidget | widgets.layouts.ContextLayoutBase | None = None, stretch: int | None = None, margins: PySide2.QtCore.QMargins | tuple | int | None = None, align: typing.Optional[typing.Literal[PySide2.QtCore.Qt.AlignmentFlag.AlignLeft, PySide2.QtCore.Qt.AlignmentFlag.AlignRight, PySide2.QtCore.Qt.AlignmentFlag.AlignTop, PySide2.QtCore.Qt.AlignmentFlag.AlignBottom, PySide2.QtCore.Qt.AlignmentFlag.AlignCenter, 'left', 'l', 'right', 'r', 'top', 't', 'bottom', 'bot', 'b', 'center', 'c']] = None, **kwargs )","title":"method CGridLayout.__init__"},{"location":"api/widgets.layouts/#method-cgridlayoutadd","text":"add( item: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout], *args, **kwargs ) \u2192 PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout]","title":"method CGridLayout.add"},{"location":"api/widgets.layouts/#method-cgridlayoutaddlayout","text":"addLayout( item: PySide2.QtWidgets.QLayout, row: int, column: int, row_span: int = 1, column_span: int = 1, rowSpan: int = 1, columnSpan: int = 1, **kwargs ) \u2192 None Change the function signature to allow using the spans as named params","title":"method CGridLayout.addLayout"},{"location":"api/widgets.layouts/#method-cgridlayoutaddwidget","text":"addWidget( item: PySide2.QtWidgets.QWidget, row: int, column: int, row_span: int = 1, column_span: int = 1, rowSpan: int = 1, columnSpan: int = 1, **kwargs ) \u2192 None Change the function signature to allow using the spans as named params","title":"method CGridLayout.addWidget"},{"location":"api/widgets.layouts/#method-cgridlayoutform","text":"form(*args, **kwargs)","title":"method CGridLayout.form"},{"location":"api/widgets.layouts/#method-cgridlayoutgrid","text":"grid(*args, **kwargs)","title":"method CGridLayout.grid"},{"location":"api/widgets.layouts/#method-cgridlayouthbox","text":"hbox(*args, **kwargs)","title":"method CGridLayout.hbox"},{"location":"api/widgets.layouts/#method-cgridlayoutscroll","text":"scroll(name: str | None = None, **kwargs)","title":"method CGridLayout.scroll"},{"location":"api/widgets.layouts/#method-cgridlayoutsplit","text":"split(name: str | None = None, **kwargs)","title":"method CGridLayout.split"},{"location":"api/widgets.layouts/#method-cgridlayoutvbox","text":"vbox(*args, **kwargs)","title":"method CGridLayout.vbox"},{"location":"api/widgets.layouts/#class-cformlayout","text":"","title":"class CFormLayout"},{"location":"api/widgets.layouts/#method-cformlayout__init__","text":"__init__( parent: PySide2.QtWidgets.QMainWindow | PySide2.QtWidgets.QSplitter | PySide2.QtWidgets.QWidget | widgets.layouts.ContextLayoutBase | None = None, stretch: int | None = None, margins: PySide2.QtCore.QMargins | tuple | int | None = None, align: typing.Optional[typing.Literal[PySide2.QtCore.Qt.AlignmentFlag.AlignLeft, PySide2.QtCore.Qt.AlignmentFlag.AlignRight, PySide2.QtCore.Qt.AlignmentFlag.AlignTop, PySide2.QtCore.Qt.AlignmentFlag.AlignBottom, PySide2.QtCore.Qt.AlignmentFlag.AlignCenter, 'left', 'l', 'right', 'r', 'top', 't', 'bottom', 'bot', 'b', 'center', 'c']] = None, **kwargs )","title":"method CFormLayout.__init__"},{"location":"api/widgets.layouts/#method-cformlayoutadd","text":"add( item: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout], *args, **kwargs ) \u2192 PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout]","title":"method CFormLayout.add"},{"location":"api/widgets.layouts/#method-cformlayoutform","text":"form(*args, **kwargs)","title":"method CFormLayout.form"},{"location":"api/widgets.layouts/#method-cformlayoutgrid","text":"grid(*args, **kwargs)","title":"method CFormLayout.grid"},{"location":"api/widgets.layouts/#method-cformlayouthbox","text":"hbox(*args, **kwargs)","title":"method CFormLayout.hbox"},{"location":"api/widgets.layouts/#method-cformlayoutscroll","text":"scroll(name: str | None = None, **kwargs)","title":"method CFormLayout.scroll"},{"location":"api/widgets.layouts/#method-cformlayoutsplit","text":"split(name: str | None = None, **kwargs)","title":"method CFormLayout.split"},{"location":"api/widgets.layouts/#method-cformlayoutvbox","text":"vbox(*args, **kwargs)","title":"method CFormLayout.vbox"},{"location":"api/widgets.layouts/#class-csplitter","text":"","title":"class CSplitter"},{"location":"api/widgets.layouts/#method-csplitter__init__","text":"__init__( parent: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | widgets.layouts.ContextLayoutBase | None = None, margins: PySide2.QtCore.QMargins | tuple | int | None = None, orientation: typing.Optional[typing.Literal[PySide2.QtCore.Qt.Orientation.Horizontal, PySide2.QtCore.Qt.Orientation.Vertical, 'horizontal', 'h', 'vertical', 'v']] = None, **kwargs )","title":"method CSplitter.__init__"},{"location":"api/widgets.layouts/#method-csplitteradd","text":"add( item: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout], stretch: int | None = None ) \u2192 PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout]","title":"method CSplitter.add"},{"location":"api/widgets.layouts/#class-persistentcsplitter","text":"","title":"class PersistentCSplitter"},{"location":"api/widgets.layouts/#method-persistentcsplitter__init__","text":"__init__( name: str, parent: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | widgets.layouts.ContextLayoutBase | None = None, **kwargs )","title":"method PersistentCSplitter.__init__"},{"location":"api/widgets.layouts/#method-persistentcsplitteradd","text":"add( item: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout], stretch: int | None = None ) \u2192 PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout]","title":"method PersistentCSplitter.add"},{"location":"api/widgets.layouts/#method-persistentcsplitterrestore_state","text":"restore_state()","title":"method PersistentCSplitter.restore_state"},{"location":"api/widgets.layouts/#class-cscrollarea","text":"","title":"class CScrollArea"},{"location":"api/widgets.layouts/#method-cscrollarea__init__","text":"__init__( parent: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | widgets.layouts.ContextLayoutBase | None = None, margins: PySide2.QtCore.QMargins | tuple | int | None = None, orientation: typing.Optional[typing.Literal[PySide2.QtCore.Qt.Orientation.Horizontal, PySide2.QtCore.Qt.Orientation.Vertical, 'horizontal', 'h', 'vertical', 'v']] = None, **kwargs )","title":"method CScrollArea.__init__"},{"location":"api/widgets.layouts/#method-cscrollareaadd","text":"add( item: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout], stretch: int = None ) \u2192 PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout]","title":"method CScrollArea.add"},{"location":"api/widgets.layouts/#method-cscrollareaaddlayout","text":"addLayout(*args, **kwargs)","title":"method CScrollArea.addLayout"},{"location":"api/widgets.layouts/#method-cscrollareaaddwidget","text":"addWidget(*args, **kwargs)","title":"method CScrollArea.addWidget"},{"location":"api/widgets.layouts/#class-persistentcscrollarea","text":"","title":"class PersistentCScrollArea"},{"location":"api/widgets.layouts/#method-persistentcscrollarea__init__","text":"__init__( name: str, parent: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | widgets.layouts.ContextLayoutBase | None = None, **kwargs )","title":"method PersistentCScrollArea.__init__"},{"location":"api/widgets.layouts/#method-persistentcscrollareaadd","text":"add( item: PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout], *args, **kwargs ) \u2192 PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout | list[PySide2.QtWidgets.QWidget | PySide2.QtWidgets.QLayout]","title":"method PersistentCScrollArea.add"},{"location":"api/widgets.layouts/#method-persistentcscrollarearestore_state","text":"restore_state()","title":"method PersistentCScrollArea.restore_state"},{"location":"api/widgets.layouts/#method-persistentcscrollareascroll_to","text":"scroll_to(value: int) This file was automatically generated via lazydocs .","title":"method PersistentCScrollArea.scroll_to"},{"location":"api/widgets.line_widgets/","text":"module widgets.line_widgets Global Variables TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 class VLine method VLine.__init__ __init__(parent=None, line_width=1) class HLine method HLine.__init__ __init__(parent=None, line_width=1) This file was automatically generated via lazydocs .","title":"Widgets.line widgets"},{"location":"api/widgets.line_widgets/#module-widgetsline_widgets","text":"","title":"module widgets.line_widgets"},{"location":"api/widgets.line_widgets/#global-variables","text":"TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6","title":"Global Variables"},{"location":"api/widgets.line_widgets/#class-vline","text":"","title":"class VLine"},{"location":"api/widgets.line_widgets/#method-vline__init__","text":"__init__(parent=None, line_width=1)","title":"method VLine.__init__"},{"location":"api/widgets.line_widgets/#class-hline","text":"","title":"class HLine"},{"location":"api/widgets.line_widgets/#method-hline__init__","text":"__init__(parent=None, line_width=1) This file was automatically generated via lazydocs .","title":"method HLine.__init__"},{"location":"api/widgets.link_label/","text":"module widgets.link_label Global Variables TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 class LinkLabel method LinkLabel.__init__ __init__(text='', link='', both=None, parent=None) method LinkLabel.setBoth setBoth(value) method LinkLabel.setLink setLink(link) method LinkLabel.setText setText(text) This file was automatically generated via lazydocs .","title":"Widgets.link label"},{"location":"api/widgets.link_label/#module-widgetslink_label","text":"","title":"module widgets.link_label"},{"location":"api/widgets.link_label/#global-variables","text":"TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6","title":"Global Variables"},{"location":"api/widgets.link_label/#class-linklabel","text":"","title":"class LinkLabel"},{"location":"api/widgets.link_label/#method-linklabel__init__","text":"__init__(text='', link='', both=None, parent=None)","title":"method LinkLabel.__init__"},{"location":"api/widgets.link_label/#method-linklabelsetboth","text":"setBoth(value)","title":"method LinkLabel.setBoth"},{"location":"api/widgets.link_label/#method-linklabelsetlink","text":"setLink(link)","title":"method LinkLabel.setLink"},{"location":"api/widgets.link_label/#method-linklabelsettext","text":"setText(text) This file was automatically generated via lazydocs .","title":"method LinkLabel.setText"},{"location":"api/widgets/","text":"module widgets Global Variables layouts buttons labeledit link_label line_widgets persistent_widgets persistent_tab_widget toggle toolbar This file was automatically generated via lazydocs .","title":"Widgets"},{"location":"api/widgets/#module-widgets","text":"","title":"module widgets"},{"location":"api/widgets/#global-variables","text":"layouts buttons labeledit link_label line_widgets persistent_widgets persistent_tab_widget toggle toolbar This file was automatically generated via lazydocs .","title":"Global Variables"},{"location":"api/widgets.persistent_tab_widget/","text":"module widgets.persistent_tab_widget Global Variables TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 class PersistentTabWidget method PersistentTabWidget.__init__ __init__(name, tabs=None, *args, **kwargs) method PersistentTabWidget.close_tab close_tab(index) method PersistentTabWidget.menu menu(pos) \u2192 None method PersistentTabWidget.move_tab move_tab(old, new) method PersistentTabWidget.restore_state restore_state(tabs=None) method PersistentTabWidget.tab_order tab_order() method PersistentTabWidget.unhide_all unhide_all() method PersistentTabWidget.visible_tabs visible_tabs() This file was automatically generated via lazydocs .","title":"Widgets.persistent tab widget"},{"location":"api/widgets.persistent_tab_widget/#module-widgetspersistent_tab_widget","text":"","title":"module widgets.persistent_tab_widget"},{"location":"api/widgets.persistent_tab_widget/#global-variables","text":"TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6","title":"Global Variables"},{"location":"api/widgets.persistent_tab_widget/#class-persistenttabwidget","text":"","title":"class PersistentTabWidget"},{"location":"api/widgets.persistent_tab_widget/#method-persistenttabwidget__init__","text":"__init__(name, tabs=None, *args, **kwargs)","title":"method PersistentTabWidget.__init__"},{"location":"api/widgets.persistent_tab_widget/#method-persistenttabwidgetclose_tab","text":"close_tab(index)","title":"method PersistentTabWidget.close_tab"},{"location":"api/widgets.persistent_tab_widget/#method-persistenttabwidgetmenu","text":"menu(pos) \u2192 None","title":"method PersistentTabWidget.menu"},{"location":"api/widgets.persistent_tab_widget/#method-persistenttabwidgetmove_tab","text":"move_tab(old, new)","title":"method PersistentTabWidget.move_tab"},{"location":"api/widgets.persistent_tab_widget/#method-persistenttabwidgetrestore_state","text":"restore_state(tabs=None)","title":"method PersistentTabWidget.restore_state"},{"location":"api/widgets.persistent_tab_widget/#method-persistenttabwidgettab_order","text":"tab_order()","title":"method PersistentTabWidget.tab_order"},{"location":"api/widgets.persistent_tab_widget/#method-persistenttabwidgetunhide_all","text":"unhide_all()","title":"method PersistentTabWidget.unhide_all"},{"location":"api/widgets.persistent_tab_widget/#method-persistenttabwidgetvisible_tabs","text":"visible_tabs() This file was automatically generated via lazydocs .","title":"method PersistentTabWidget.visible_tabs"},{"location":"api/widgets.persistent_widgets/","text":"module widgets.persistent_widgets Global Variables TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 class PersistentCheckBox method PersistentCheckBox.__init__ __init__(name, changed=None, *args, **kwargs) method PersistentCheckBox.restore_state restore_state() class PersistentLineEdit method PersistentLineEdit.__init__ __init__(name, *args, default='', changed=None, **kwargs) method PersistentLineEdit.restore_state restore_state() class PersistentTextEdit method PersistentTextEdit.__init__ __init__(name, *args, default='', changed=None, **kwargs) method PersistentTextEdit.restore_state restore_state() class PersistentPlainTextEdit method PersistentPlainTextEdit.__init__ __init__(name, *args, default='', changed=None, **kwargs) method PersistentPlainTextEdit.restore_state restore_state() class PersistentListWidget method PersistentListWidget.__init__ __init__(name, items=[], default=[], changed=None, *args, **kwargs) method PersistentListWidget.restore_state restore_state() method PersistentListWidget.selected_items selected_items() class PersistentTreeWidget method PersistentTreeWidget.__init__ __init__( name, items=[], index_column=0, default=[], changed=None, *args, **kwargs ) method PersistentTreeWidget.restore_state restore_state() method PersistentTreeWidget.selected_items selected_items() class PersistentComboBox method PersistentComboBox.__init__ __init__(name, items=[], changed=None, *args, **kwargs) method PersistentComboBox.restore_state restore_state() class PersistentCheckableAction method PersistentCheckableAction.__init__ __init__(name, *args, **kwargs) method PersistentCheckableAction.restore_state restore_state() This file was automatically generated via lazydocs .","title":"Widgets.persistent widgets"},{"location":"api/widgets.persistent_widgets/#module-widgetspersistent_widgets","text":"","title":"module widgets.persistent_widgets"},{"location":"api/widgets.persistent_widgets/#global-variables","text":"TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6","title":"Global Variables"},{"location":"api/widgets.persistent_widgets/#class-persistentcheckbox","text":"","title":"class PersistentCheckBox"},{"location":"api/widgets.persistent_widgets/#method-persistentcheckbox__init__","text":"__init__(name, changed=None, *args, **kwargs)","title":"method PersistentCheckBox.__init__"},{"location":"api/widgets.persistent_widgets/#method-persistentcheckboxrestore_state","text":"restore_state()","title":"method PersistentCheckBox.restore_state"},{"location":"api/widgets.persistent_widgets/#class-persistentlineedit","text":"","title":"class PersistentLineEdit"},{"location":"api/widgets.persistent_widgets/#method-persistentlineedit__init__","text":"__init__(name, *args, default='', changed=None, **kwargs)","title":"method PersistentLineEdit.__init__"},{"location":"api/widgets.persistent_widgets/#method-persistentlineeditrestore_state","text":"restore_state()","title":"method PersistentLineEdit.restore_state"},{"location":"api/widgets.persistent_widgets/#class-persistenttextedit","text":"","title":"class PersistentTextEdit"},{"location":"api/widgets.persistent_widgets/#method-persistenttextedit__init__","text":"__init__(name, *args, default='', changed=None, **kwargs)","title":"method PersistentTextEdit.__init__"},{"location":"api/widgets.persistent_widgets/#method-persistenttexteditrestore_state","text":"restore_state()","title":"method PersistentTextEdit.restore_state"},{"location":"api/widgets.persistent_widgets/#class-persistentplaintextedit","text":"","title":"class PersistentPlainTextEdit"},{"location":"api/widgets.persistent_widgets/#method-persistentplaintextedit__init__","text":"__init__(name, *args, default='', changed=None, **kwargs)","title":"method PersistentPlainTextEdit.__init__"},{"location":"api/widgets.persistent_widgets/#method-persistentplaintexteditrestore_state","text":"restore_state()","title":"method PersistentPlainTextEdit.restore_state"},{"location":"api/widgets.persistent_widgets/#class-persistentlistwidget","text":"","title":"class PersistentListWidget"},{"location":"api/widgets.persistent_widgets/#method-persistentlistwidget__init__","text":"__init__(name, items=[], default=[], changed=None, *args, **kwargs)","title":"method PersistentListWidget.__init__"},{"location":"api/widgets.persistent_widgets/#method-persistentlistwidgetrestore_state","text":"restore_state()","title":"method PersistentListWidget.restore_state"},{"location":"api/widgets.persistent_widgets/#method-persistentlistwidgetselected_items","text":"selected_items()","title":"method PersistentListWidget.selected_items"},{"location":"api/widgets.persistent_widgets/#class-persistenttreewidget","text":"","title":"class PersistentTreeWidget"},{"location":"api/widgets.persistent_widgets/#method-persistenttreewidget__init__","text":"__init__( name, items=[], index_column=0, default=[], changed=None, *args, **kwargs )","title":"method PersistentTreeWidget.__init__"},{"location":"api/widgets.persistent_widgets/#method-persistenttreewidgetrestore_state","text":"restore_state()","title":"method PersistentTreeWidget.restore_state"},{"location":"api/widgets.persistent_widgets/#method-persistenttreewidgetselected_items","text":"selected_items()","title":"method PersistentTreeWidget.selected_items"},{"location":"api/widgets.persistent_widgets/#class-persistentcombobox","text":"","title":"class PersistentComboBox"},{"location":"api/widgets.persistent_widgets/#method-persistentcombobox__init__","text":"__init__(name, items=[], changed=None, *args, **kwargs)","title":"method PersistentComboBox.__init__"},{"location":"api/widgets.persistent_widgets/#method-persistentcomboboxrestore_state","text":"restore_state()","title":"method PersistentComboBox.restore_state"},{"location":"api/widgets.persistent_widgets/#class-persistentcheckableaction","text":"","title":"class PersistentCheckableAction"},{"location":"api/widgets.persistent_widgets/#method-persistentcheckableaction__init__","text":"__init__(name, *args, **kwargs)","title":"method PersistentCheckableAction.__init__"},{"location":"api/widgets.persistent_widgets/#method-persistentcheckableactionrestore_state","text":"restore_state() This file was automatically generated via lazydocs .","title":"method PersistentCheckableAction.restore_state"},{"location":"api/widgets.toggle/","text":"module widgets.toggle Global Variables TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 class Toggle method Toggle.__init__ __init__( *args, bar_color=PySide2.QtCore.Qt.GlobalColor.gray, checked_color='#00B0FF', handle_color=PySide2.QtCore.Qt.GlobalColor.white, **kwargs ) method Toggle.handle_state_change handle_state_change(value) method Toggle.hitButton hitButton(pos: PySide2.QtCore.QPoint) method Toggle.paintEvent paintEvent(e: PySide2.QtGui.QPaintEvent) method Toggle.sizeHint sizeHint() class AnimatedToggle method AnimatedToggle.__init__ __init__( *args, pulse_unchecked_color='#44999999', pulse_checked_color='#4400B0EE', **kwargs ) method AnimatedToggle.handle_state_change handle_state_change(value) method AnimatedToggle.hitButton hitButton(pos: PySide2.QtCore.QPoint) method AnimatedToggle.paintEvent paintEvent(e: PySide2.QtGui.QPaintEvent) method AnimatedToggle.sizeHint sizeHint() class PersistentToggle method PersistentToggle.__init__ __init__(name, changed=None, *args, **kwargs) method PersistentToggle.handle_state_change handle_state_change(value) method PersistentToggle.hitButton hitButton(pos: PySide2.QtCore.QPoint) method PersistentToggle.paintEvent paintEvent(e: PySide2.QtGui.QPaintEvent) method PersistentToggle.restore_state restore_state() method PersistentToggle.sizeHint sizeHint() class PersistentAnimatedToggle method PersistentAnimatedToggle.__init__ __init__(name, changed=None, *args, **kwargs) method PersistentAnimatedToggle.handle_state_change handle_state_change(value) method PersistentAnimatedToggle.hitButton hitButton(pos: PySide2.QtCore.QPoint) method PersistentAnimatedToggle.paintEvent paintEvent(e: PySide2.QtGui.QPaintEvent) method PersistentAnimatedToggle.restore_state restore_state() method PersistentAnimatedToggle.sizeHint sizeHint() This file was automatically generated via lazydocs .","title":"Widgets.toggle"},{"location":"api/widgets.toggle/#module-widgetstoggle","text":"","title":"module widgets.toggle"},{"location":"api/widgets.toggle/#global-variables","text":"TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6","title":"Global Variables"},{"location":"api/widgets.toggle/#class-toggle","text":"","title":"class Toggle"},{"location":"api/widgets.toggle/#method-toggle__init__","text":"__init__( *args, bar_color=PySide2.QtCore.Qt.GlobalColor.gray, checked_color='#00B0FF', handle_color=PySide2.QtCore.Qt.GlobalColor.white, **kwargs )","title":"method Toggle.__init__"},{"location":"api/widgets.toggle/#method-togglehandle_state_change","text":"handle_state_change(value)","title":"method Toggle.handle_state_change"},{"location":"api/widgets.toggle/#method-togglehitbutton","text":"hitButton(pos: PySide2.QtCore.QPoint)","title":"method Toggle.hitButton"},{"location":"api/widgets.toggle/#method-togglepaintevent","text":"paintEvent(e: PySide2.QtGui.QPaintEvent)","title":"method Toggle.paintEvent"},{"location":"api/widgets.toggle/#method-togglesizehint","text":"sizeHint()","title":"method Toggle.sizeHint"},{"location":"api/widgets.toggle/#class-animatedtoggle","text":"","title":"class AnimatedToggle"},{"location":"api/widgets.toggle/#method-animatedtoggle__init__","text":"__init__( *args, pulse_unchecked_color='#44999999', pulse_checked_color='#4400B0EE', **kwargs )","title":"method AnimatedToggle.__init__"},{"location":"api/widgets.toggle/#method-animatedtogglehandle_state_change","text":"handle_state_change(value)","title":"method AnimatedToggle.handle_state_change"},{"location":"api/widgets.toggle/#method-animatedtogglehitbutton","text":"hitButton(pos: PySide2.QtCore.QPoint)","title":"method AnimatedToggle.hitButton"},{"location":"api/widgets.toggle/#method-animatedtogglepaintevent","text":"paintEvent(e: PySide2.QtGui.QPaintEvent)","title":"method AnimatedToggle.paintEvent"},{"location":"api/widgets.toggle/#method-animatedtogglesizehint","text":"sizeHint()","title":"method AnimatedToggle.sizeHint"},{"location":"api/widgets.toggle/#class-persistenttoggle","text":"","title":"class PersistentToggle"},{"location":"api/widgets.toggle/#method-persistenttoggle__init__","text":"__init__(name, changed=None, *args, **kwargs)","title":"method PersistentToggle.__init__"},{"location":"api/widgets.toggle/#method-persistenttogglehandle_state_change","text":"handle_state_change(value)","title":"method PersistentToggle.handle_state_change"},{"location":"api/widgets.toggle/#method-persistenttogglehitbutton","text":"hitButton(pos: PySide2.QtCore.QPoint)","title":"method PersistentToggle.hitButton"},{"location":"api/widgets.toggle/#method-persistenttogglepaintevent","text":"paintEvent(e: PySide2.QtGui.QPaintEvent)","title":"method PersistentToggle.paintEvent"},{"location":"api/widgets.toggle/#method-persistenttogglerestore_state","text":"restore_state()","title":"method PersistentToggle.restore_state"},{"location":"api/widgets.toggle/#method-persistenttogglesizehint","text":"sizeHint()","title":"method PersistentToggle.sizeHint"},{"location":"api/widgets.toggle/#class-persistentanimatedtoggle","text":"","title":"class PersistentAnimatedToggle"},{"location":"api/widgets.toggle/#method-persistentanimatedtoggle__init__","text":"__init__(name, changed=None, *args, **kwargs)","title":"method PersistentAnimatedToggle.__init__"},{"location":"api/widgets.toggle/#method-persistentanimatedtogglehandle_state_change","text":"handle_state_change(value)","title":"method PersistentAnimatedToggle.handle_state_change"},{"location":"api/widgets.toggle/#method-persistentanimatedtogglehitbutton","text":"hitButton(pos: PySide2.QtCore.QPoint)","title":"method PersistentAnimatedToggle.hitButton"},{"location":"api/widgets.toggle/#method-persistentanimatedtogglepaintevent","text":"paintEvent(e: PySide2.QtGui.QPaintEvent)","title":"method PersistentAnimatedToggle.paintEvent"},{"location":"api/widgets.toggle/#method-persistentanimatedtogglerestore_state","text":"restore_state()","title":"method PersistentAnimatedToggle.restore_state"},{"location":"api/widgets.toggle/#method-persistentanimatedtogglesizehint","text":"sizeHint() This file was automatically generated via lazydocs .","title":"method PersistentAnimatedToggle.sizeHint"},{"location":"api/widgets.toolbar/","text":"module widgets.toolbar Global Variables TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 location_map class BaseToolbar method BaseToolbar.__init__ __init__(parent=None, name=None, location=None, size=40, **kwargs) method BaseToolbar.add_spacer add_spacer() This file was automatically generated via lazydocs .","title":"Widgets.toolbar"},{"location":"api/widgets.toolbar/#module-widgetstoolbar","text":"","title":"module widgets.toolbar"},{"location":"api/widgets.toolbar/#global-variables","text":"TYPE_CHECKING PYQT6 PYQT5 PYSIDE2 PYSIDE6 location_map","title":"Global Variables"},{"location":"api/widgets.toolbar/#class-basetoolbar","text":"","title":"class BaseToolbar"},{"location":"api/widgets.toolbar/#method-basetoolbar__init__","text":"__init__(parent=None, name=None, location=None, size=40, **kwargs)","title":"method BaseToolbar.__init__"},{"location":"api/widgets.toolbar/#method-basetoolbaradd_spacer","text":"add_spacer() This file was automatically generated via lazydocs .","title":"method BaseToolbar.add_spacer"},{"location":"extras/","text":"Extras Qtstrap's Extras are optional, advanced widgets and subsystems to enhance your application.","title":"Extras"},{"location":"extras/#extras","text":"Qtstrap's Extras are optional, advanced widgets and subsystems to enhance your application.","title":"Extras"},{"location":"extras/code_editor/","text":"Code Editor CodeEditor A custom QTextEdit with a variety of useful code editing features: - preconfigured monospace font - preconfigured support for autocompletions(just add a list of strings or a QAbstractItemModel) - ctrl + enter signal - surround selection with braces - comment/uncomment selection - duplicate selection up/down - move selection up/down - indent/dedent selection CodeLine A CodeEditor that's pretending to be a QLineEdit . PythonHighlighter A QSyntaxHighlighter set up to highlight python code in a rough approximation of VSCode's default Light and Dark themes. Supports qtstrap's global light/dark mode.","title":"Code Editor"},{"location":"extras/code_editor/#code-editor","text":"","title":"Code Editor"},{"location":"extras/code_editor/#codeeditor","text":"A custom QTextEdit with a variety of useful code editing features: - preconfigured monospace font - preconfigured support for autocompletions(just add a list of strings or a QAbstractItemModel) - ctrl + enter signal - surround selection with braces - comment/uncomment selection - duplicate selection up/down - move selection up/down - indent/dedent selection","title":"CodeEditor"},{"location":"extras/code_editor/#codeline","text":"A CodeEditor that's pretending to be a QLineEdit .","title":"CodeLine"},{"location":"extras/code_editor/#pythonhighlighter","text":"A QSyntaxHighlighter set up to highlight python code in a rough approximation of VSCode's default Light and Dark themes. Supports qtstrap's global light/dark mode.","title":"PythonHighlighter"},{"location":"extras/command_palette/","text":"Command Palette Like VSCode/Sublime Text, but in your application. Features: Register Command s from anywhere in your application Supports qtstrap's global light/dark mode As an input method Call CommandPalette.open() to open the palette as a highly configurable input method. It supports: - prompt text - placeholder text - a list of options - a completion model - an input validator - an input mask The user's input or selection is returned to you via a callback. Installing the CommandPalette and defining Command s: from qtstrap import * from qtstrap.extras.command_palette import CommandPalette, Command class MainWindow(BaseMainWindow): def __init__(self, parent=None) -> None: super().__init__(parent=parent) self.command_palette = CommandPalette(self) self.commands = [ Command('Quit Application', triggered=self.close, shortcut='Ctrl+Q'), Command('Theme: Set to Light Mode', triggered=lambda: App().change_theme('light')), Command('Theme: Set to Dark Mode', triggered=lambda: App().change_theme('dark')), ]","title":"Command Palette"},{"location":"extras/command_palette/#command-palette","text":"Like VSCode/Sublime Text, but in your application.","title":"Command Palette"},{"location":"extras/command_palette/#features","text":"Register Command s from anywhere in your application Supports qtstrap's global light/dark mode","title":"Features:"},{"location":"extras/command_palette/#as-an-input-method","text":"Call CommandPalette.open() to open the palette as a highly configurable input method. It supports: - prompt text - placeholder text - a list of options - a completion model - an input validator - an input mask The user's input or selection is returned to you via a callback. Installing the CommandPalette and defining Command s: from qtstrap import * from qtstrap.extras.command_palette import CommandPalette, Command class MainWindow(BaseMainWindow): def __init__(self, parent=None) -> None: super().__init__(parent=parent) self.command_palette = CommandPalette(self) self.commands = [ Command('Quit Application', triggered=self.close, shortcut='Ctrl+Q'), Command('Theme: Set to Light Mode', triggered=lambda: App().change_theme('light')), Command('Theme: Set to Dark Mode', triggered=lambda: App().change_theme('dark')), ]","title":"As an input method"},{"location":"extras/log_monitor/","text":"Log Monitor The log monitor system redirects application logs to an SQLite3 database for persistence. Also registers a global sys.excepthook , and logs all uncaught exceptions. LogMonitorWidget A very powerful log monitor widget that connects to the local log database, providing a live view of application logs. Store multiple profiles of advanced filters: - text filter - query limit - limit to current application session - individually enable/disable log sources - individually enable/disable every log level of every source LogMonitorDockWidget a LogMonitorWidget wrapped in a QDockWidget LogMonitorDropdown a LogMonitorWidget wrapped in an application-covering drop down panel Installing the log monitor: from qtstrap import * from qtstrap.extras import log_monitor # give a custom name to the uncaught exception handler log_monitor.exception_logger_name = 'your_application.exceptions' # install the log handler log_monitor.install() class MainWindow(BaseMainWindow): def __init__(self, parent=None) -> None: super().__init__(parent=parent) # create an instance of the dropdown version of the log monitor self.log_monitor = log_monitor.LogMonitorDropdown(self, shortcut='ctrl+`') # create a statusbar, which contains a settings button and a settings menu self.create_statusbar() # add the log monitor's toggle view action to the settings menu self.settings_menu.addAction(self.log_monitor.toggleViewAction())","title":"Log Monitor"},{"location":"extras/log_monitor/#log-monitor","text":"The log monitor system redirects application logs to an SQLite3 database for persistence. Also registers a global sys.excepthook , and logs all uncaught exceptions.","title":"Log Monitor"},{"location":"extras/log_monitor/#logmonitorwidget","text":"A very powerful log monitor widget that connects to the local log database, providing a live view of application logs. Store multiple profiles of advanced filters: - text filter - query limit - limit to current application session - individually enable/disable log sources - individually enable/disable every log level of every source","title":"LogMonitorWidget"},{"location":"extras/log_monitor/#logmonitordockwidget","text":"a LogMonitorWidget wrapped in a QDockWidget","title":"LogMonitorDockWidget"},{"location":"extras/log_monitor/#logmonitordropdown","text":"a LogMonitorWidget wrapped in an application-covering drop down panel Installing the log monitor: from qtstrap import * from qtstrap.extras import log_monitor # give a custom name to the uncaught exception handler log_monitor.exception_logger_name = 'your_application.exceptions' # install the log handler log_monitor.install() class MainWindow(BaseMainWindow): def __init__(self, parent=None) -> None: super().__init__(parent=parent) # create an instance of the dropdown version of the log monitor self.log_monitor = log_monitor.LogMonitorDropdown(self, shortcut='ctrl+`') # create a statusbar, which contains a settings button and a settings menu self.create_statusbar() # add the log monitor's toggle view action to the settings menu self.settings_menu.addAction(self.log_monitor.toggleViewAction())","title":"LogMonitorDropdown"},{"location":"extras/styles/","text":"Styles Light/Dark mode with live switching.","title":"Styles"},{"location":"extras/styles/#styles","text":"Light/Dark mode with live switching.","title":"Styles"},{"location":"quickstart/baseapplication/","text":"BaseApplication BaseApplication is a subclass of QApplication , adding several behaviors that address shortcomings of the Qt/PySide2/PyQt environment. Ctrl+C Handler Due to the way that the thin layer of python interacts with the Qt libraries underneath, a naked PySide2/PyQt application can't be stopped using ctrl+c like a normal program. I find this extremely annoying. The solution to this has two parts. Part 1 is to use the python signal library to bind a function to the SIGINT signal. Unfortunately, this isn't enough, because in order for signal handler to fire, the python interpreter needs to get some cpu time. Once you start the Qt interpreter using app.exec_() , execution passes down into Qt's C++ code and doesn't return until the application exits. Thus, we need to artifically secure some runtime for the python interpreter. This is part 2: creating a QTimer that triggers every 10ms(the exact time is not important) and calls an empty python function, update() . When the timer triggers and update() is called, execution is passed back to the python interpreter, giving it a chance to process signals. def init_ctrlc_handler(self): # grab the keyboard interrupt signal signal.signal(signal.SIGINT, self.ctrlc_handler) # empty timer callback def update(): pass # create timer to force python interpreter to get some runtime self.timer = QTimer() # create a QTimer self.timer.timeout.connect(update) # connect to our empty timer callback self.timer.start(10) # set the timer to trigger every 10mS App Info Several Qt modules can automatically query the running QApplication for a number of attributes: organizationName organizationDomain applicationName applicationVersion One example is QSettings , which \"provides persistent, platform-independent application settings\". Using QSettings reqires an applicationName and an organizationName. # every time you want to access QSettings, yuck settings = QSettings('Organization', 'Application') However, if you give this information to your QApplication , then QSettings will use those values so you don't have to specify them every time. # once, at startup app = QApplication() app.setOrganizationName('Organization') app.setApplicationName('Application') # every time you want to access QSettings, much better! settings = QSettings() As a side bonus, a QMainWindow will automatically set its window title attribute to the QApplication 's applicationName .","title":"BaseApplication"},{"location":"quickstart/baseapplication/#baseapplication","text":"BaseApplication is a subclass of QApplication , adding several behaviors that address shortcomings of the Qt/PySide2/PyQt environment.","title":"BaseApplication"},{"location":"quickstart/baseapplication/#ctrlc-handler","text":"Due to the way that the thin layer of python interacts with the Qt libraries underneath, a naked PySide2/PyQt application can't be stopped using ctrl+c like a normal program. I find this extremely annoying. The solution to this has two parts. Part 1 is to use the python signal library to bind a function to the SIGINT signal. Unfortunately, this isn't enough, because in order for signal handler to fire, the python interpreter needs to get some cpu time. Once you start the Qt interpreter using app.exec_() , execution passes down into Qt's C++ code and doesn't return until the application exits. Thus, we need to artifically secure some runtime for the python interpreter. This is part 2: creating a QTimer that triggers every 10ms(the exact time is not important) and calls an empty python function, update() . When the timer triggers and update() is called, execution is passed back to the python interpreter, giving it a chance to process signals. def init_ctrlc_handler(self): # grab the keyboard interrupt signal signal.signal(signal.SIGINT, self.ctrlc_handler) # empty timer callback def update(): pass # create timer to force python interpreter to get some runtime self.timer = QTimer() # create a QTimer self.timer.timeout.connect(update) # connect to our empty timer callback self.timer.start(10) # set the timer to trigger every 10mS","title":"Ctrl+C Handler"},{"location":"quickstart/baseapplication/#app-info","text":"Several Qt modules can automatically query the running QApplication for a number of attributes: organizationName organizationDomain applicationName applicationVersion One example is QSettings , which \"provides persistent, platform-independent application settings\". Using QSettings reqires an applicationName and an organizationName. # every time you want to access QSettings, yuck settings = QSettings('Organization', 'Application') However, if you give this information to your QApplication , then QSettings will use those values so you don't have to specify them every time. # once, at startup app = QApplication() app.setOrganizationName('Organization') app.setApplicationName('Application') # every time you want to access QSettings, much better! settings = QSettings() As a side bonus, a QMainWindow will automatically set its window title attribute to the QApplication 's applicationName .","title":"App Info"},{"location":"quickstart/basemainwindow/","text":"BaseMainWindow BaseMainWindow is a subclass of QMainWindow , adding several behaviors that address shortcomings of the Qt/PySide2/PyQt environment. Window Icon The BaseMainWindow will look for an icon file at resources/application.ico and automatically set it as the window icon, if it finds it. This icon is also used when packaging your application for distribution. qtstrap ships with a default icon you can use until you create your own. Window Settings A BaseMainWindow will stay where you put it, even when you close and and reopen your app. BaseMainWindow has a pair of methods, .save_settings() and .load_settings() , that will save and restore the window's geometry(it's size and position) and it's state(minimized/maximized, etc). .load_settings() is automatically called when starting the application, and .save_settings() is automatically called when closing it.","title":"BaseMainWindow"},{"location":"quickstart/basemainwindow/#basemainwindow","text":"BaseMainWindow is a subclass of QMainWindow , adding several behaviors that address shortcomings of the Qt/PySide2/PyQt environment.","title":"BaseMainWindow"},{"location":"quickstart/basemainwindow/#window-icon","text":"The BaseMainWindow will look for an icon file at resources/application.ico and automatically set it as the window icon, if it finds it. This icon is also used when packaging your application for distribution. qtstrap ships with a default icon you can use until you create your own.","title":"Window Icon"},{"location":"quickstart/basemainwindow/#window-settings","text":"A BaseMainWindow will stay where you put it, even when you close and and reopen your app. BaseMainWindow has a pair of methods, .save_settings() and .load_settings() , that will save and restore the window's geometry(it's size and position) and it's state(minimized/maximized, etc). .load_settings() is automatically called when starting the application, and .save_settings() is automatically called when closing it.","title":"Window Settings"},{"location":"quickstart/context_layouts/","text":"Context Layouts This is how Qt expects you to build user interfaces with code: window = QWidget() button1 = QPushButton(\"One\") button2 = QPushButton(\"Two\") button3 = QPushButton(\"Three\") button4 = QPushButton(\"Four\") layout = QVBoxLayout() window.setLayout(layout) hbox1 = QHBoxLayout() layout.addLayout(hbox1) hbox1.addWidget(button1) hbox1.addWidget(button2) hbox2 = QHBoxLayout() layout.addLayout(hbox2) hbox2.addWidget(button3) hbox2.addWidget(button4) This is only 4 buttons and it's already extremely ugly. Each nested layout needs a unique name. Every time you create a new layout you have to shift gears to add it to its parent. Don't even get me started on how pointless the distinction between .addWidget() and .addLayout() is. There isn't even a hint about what this layout will look like when it's built. We haven't even started messing with attributes like margins or alignments yet! This is definitely not pythonic. Enter, the Context Layout: window = QWidget() button1 = QPushButton(\"One\") button2 = QPushButton(\"Two\") button3 = QPushButton(\"Three\") button4 = QPushButton(\"Four\") with CVBoxLayout(window) as layout: with layout.hbox(): layout.add(button1) layout.add(button2) with layout.hbox(): layout.add(button3) layout.add(button4) All of the backtracking and repetition is gone. The pointless effort of naming each layout is gone. The indentation helps show the structure of the layout. The top level CVBoxLayout adds itself to its parent correctly and automatically. The .add() method can handle a layout or a widget or even a mixed list of both.","title":"Context Layouts"},{"location":"quickstart/context_layouts/#context-layouts","text":"This is how Qt expects you to build user interfaces with code: window = QWidget() button1 = QPushButton(\"One\") button2 = QPushButton(\"Two\") button3 = QPushButton(\"Three\") button4 = QPushButton(\"Four\") layout = QVBoxLayout() window.setLayout(layout) hbox1 = QHBoxLayout() layout.addLayout(hbox1) hbox1.addWidget(button1) hbox1.addWidget(button2) hbox2 = QHBoxLayout() layout.addLayout(hbox2) hbox2.addWidget(button3) hbox2.addWidget(button4) This is only 4 buttons and it's already extremely ugly. Each nested layout needs a unique name. Every time you create a new layout you have to shift gears to add it to its parent. Don't even get me started on how pointless the distinction between .addWidget() and .addLayout() is. There isn't even a hint about what this layout will look like when it's built. We haven't even started messing with attributes like margins or alignments yet! This is definitely not pythonic. Enter, the Context Layout: window = QWidget() button1 = QPushButton(\"One\") button2 = QPushButton(\"Two\") button3 = QPushButton(\"Three\") button4 = QPushButton(\"Four\") with CVBoxLayout(window) as layout: with layout.hbox(): layout.add(button1) layout.add(button2) with layout.hbox(): layout.add(button3) layout.add(button4) All of the backtracking and repetition is gone. The pointless effort of naming each layout is gone. The indentation helps show the structure of the layout. The top level CVBoxLayout adds itself to its parent correctly and automatically. The .add() method can handle a layout or a widget or even a mixed list of both.","title":"Context Layouts"},{"location":"quickstart/gettingstarted/","text":"Getting Started After installing qtstrap and creating a new project using qtstrap init , the first thing you should do is familiarize yourself with the qtstrap project structure . This will create a project skeleton in your current directory. main.py from qtstrap import * def run(): # create the fundamental Qt objects app = BaseApplication() window = BaseMainWindow() # make everything a little easier to see set_font_options(window, {'setPointSize': 12}) window.setMinimumSize(400, 300) # create the two widgets for our app label = QLabel('Hello World!', visible=False) button = QPushButton('Click me!') # create a function to use as an event handler def on_click(): button.setVisible(False) label.setVisible(True) # register the handler to the event button.clicked.connect(on_click) # build a layout for our two widgets with CVBoxLayout(window) as layout: with layout.hbox(align='center') as layout: layout.add(label) layout.add(button) window.show() # show the window app.exec_() # start the Qt event loop if __name__ == \"__main__\": run()","title":"Getting Started"},{"location":"quickstart/gettingstarted/#getting-started","text":"After installing qtstrap and creating a new project using qtstrap init , the first thing you should do is familiarize yourself with the qtstrap project structure . This will create a project skeleton in your current directory.","title":"Getting Started"},{"location":"quickstart/gettingstarted/#mainpy","text":"from qtstrap import * def run(): # create the fundamental Qt objects app = BaseApplication() window = BaseMainWindow() # make everything a little easier to see set_font_options(window, {'setPointSize': 12}) window.setMinimumSize(400, 300) # create the two widgets for our app label = QLabel('Hello World!', visible=False) button = QPushButton('Click me!') # create a function to use as an event handler def on_click(): button.setVisible(False) label.setVisible(True) # register the handler to the event button.clicked.connect(on_click) # build a layout for our two widgets with CVBoxLayout(window) as layout: with layout.hbox(align='center') as layout: layout.add(label) layout.add(button) window.show() # show the window app.exec_() # start the Qt event loop if __name__ == \"__main__\": run()","title":"main.py"},{"location":"quickstart/installation/","text":"Installation Existing Projects: Adding qtstrap to an existing project is easy python3 -m pip install qtstrap New Projects: This is the recommended way to create a new project using qtstrap: $ mkdir test && cd test $ python3 -m venv .venv $ source .venv/bin/activate $ python3 -m pip install qtstrap PySide6 $ qtstrap init The init script will prompt you to enter the name of your application and the name of its publisher(which is probably you), and then it will generate an application skeleton. At this point you can deactivate the virtual environment and forget it exists(until you need to add a package or something). You can test that everything installed properly by executing: $ make run If you see a window like this, then you're good to go:","title":"Installation"},{"location":"quickstart/installation/#installation","text":"","title":"Installation"},{"location":"quickstart/installation/#existing-projects","text":"Adding qtstrap to an existing project is easy python3 -m pip install qtstrap","title":"Existing Projects:"},{"location":"quickstart/installation/#new-projects","text":"This is the recommended way to create a new project using qtstrap: $ mkdir test && cd test $ python3 -m venv .venv $ source .venv/bin/activate $ python3 -m pip install qtstrap PySide6 $ qtstrap init The init script will prompt you to enter the name of your application and the name of its publisher(which is probably you), and then it will generate an application skeleton. At this point you can deactivate the virtual environment and forget it exists(until you need to add a package or something). You can test that everything installed properly by executing: $ make run If you see a window like this, then you're good to go:","title":"New Projects:"},{"location":"reference/base_application/","text":"OPTIONS * signal Path install_ctrlc_handler def install_ctrlc_handler(app) install_app_info def install_app_info(app) BaseApplication Objects class BaseApplication(QApplication) __init__ def __init__(*args, register_ctrlc_handler=True, **kwargs) -> None","title":"Base application"},{"location":"reference/base_application/#options","text":"","title":"OPTIONS"},{"location":"reference/base_application/#_1","text":"","title":"*"},{"location":"reference/base_application/#signal","text":"","title":"signal"},{"location":"reference/base_application/#path","text":"","title":"Path"},{"location":"reference/base_application/#install_ctrlc_handler","text":"def install_ctrlc_handler(app)","title":"install_ctrlc_handler"},{"location":"reference/base_application/#install_app_info","text":"def install_app_info(app)","title":"install_app_info"},{"location":"reference/base_application/#baseapplication-objects","text":"class BaseApplication(QApplication)","title":"BaseApplication Objects"},{"location":"reference/base_application/#__init__","text":"def __init__(*args, register_ctrlc_handler=True, **kwargs) -> None","title":"__init__"},{"location":"reference/base_window/","text":"* Path BaseMainWindow Objects class BaseMainWindow(QMainWindow) __init__ def __init__(*args, **kwargs) closeEvent def closeEvent(event) save_settings def save_settings() load_settings def load_settings()","title":"Base window"},{"location":"reference/base_window/#_1","text":"","title":"*"},{"location":"reference/base_window/#path","text":"","title":"Path"},{"location":"reference/base_window/#basemainwindow-objects","text":"class BaseMainWindow(QMainWindow)","title":"BaseMainWindow Objects"},{"location":"reference/base_window/#__init__","text":"def __init__(*args, **kwargs)","title":"__init__"},{"location":"reference/base_window/#closeevent","text":"def closeEvent(event)","title":"closeEvent"},{"location":"reference/base_window/#save_settings","text":"def save_settings()","title":"save_settings"},{"location":"reference/base_window/#load_settings","text":"def load_settings()","title":"load_settings"},{"location":"reference/options/","text":"Path sys AppDirs OPTIONS Objects class OPTIONS() APPLICATION_PATH app_info_available app_info portable PORTABLE_SETTINGS_FILE PORTABLE_FLAG_FILE","title":"Options"},{"location":"reference/options/#path","text":"","title":"Path"},{"location":"reference/options/#sys","text":"","title":"sys"},{"location":"reference/options/#appdirs","text":"","title":"AppDirs"},{"location":"reference/options/#options-objects","text":"class OPTIONS()","title":"OPTIONS Objects"},{"location":"reference/options/#application_path","text":"","title":"APPLICATION_PATH"},{"location":"reference/options/#app_info_available","text":"","title":"app_info_available"},{"location":"reference/options/#app_info","text":"","title":"app_info"},{"location":"reference/options/#portable","text":"","title":"portable"},{"location":"reference/options/#portable_settings_file","text":"","title":"PORTABLE_SETTINGS_FILE"},{"location":"reference/options/#portable_flag_file","text":"","title":"PORTABLE_FLAG_FILE"},{"location":"reference/settings/","text":"sys uncache def uncache(exclude) Remove package modules from cache except excluded ones. On next import they will be reloaded. Args: exclude (iter ): Sequence of module paths.","title":"Settings"},{"location":"reference/settings/#sys","text":"","title":"sys"},{"location":"reference/settings/#uncache","text":"def uncache(exclude) Remove package modules from cache except excluded ones. On next import they will be reloaded. Args: exclude (iter ): Sequence of module paths.","title":"uncache"},{"location":"reference/toolbar/","text":"* qta location_map BaseToolbar Objects class BaseToolbar(QToolBar) __init__ def __init__(parent=None, name=None, location=None, size=40) add_spacer def add_spacer() SettingsToolbar Objects class SettingsToolbar(BaseToolbar) __init__ def __init__(*args, **kwargs) add_action def add_action(action) add_separator def add_separator()","title":"Toolbar"},{"location":"reference/toolbar/#_1","text":"","title":"*"},{"location":"reference/toolbar/#qta","text":"","title":"qta"},{"location":"reference/toolbar/#location_map","text":"","title":"location_map"},{"location":"reference/toolbar/#basetoolbar-objects","text":"class BaseToolbar(QToolBar)","title":"BaseToolbar Objects"},{"location":"reference/toolbar/#__init__","text":"def __init__(parent=None, name=None, location=None, size=40)","title":"__init__"},{"location":"reference/toolbar/#add_spacer","text":"def add_spacer()","title":"add_spacer"},{"location":"reference/toolbar/#settingstoolbar-objects","text":"class SettingsToolbar(BaseToolbar)","title":"SettingsToolbar Objects"},{"location":"reference/toolbar/#__init___1","text":"def __init__(*args, **kwargs)","title":"__init__"},{"location":"reference/toolbar/#add_action","text":"def add_action(action)","title":"add_action"},{"location":"reference/toolbar/#add_separator","text":"def add_separator()","title":"add_separator"},{"location":"reference/utils.adapter/","text":"QObject SignalInstance Adapter Objects class Adapter(QObject) A signal adapter that helps create disposable connections between objects. A signal-based interface can be defined using an Adapter. Passing an existing Adapter when creating a new Adapter will automatically link all of the existing adapter's signals to the same-named signals on the new Adapter. This will allow some other object to connect to these signals for whatever purpose, and then simply delete the new Adapter object when it now longer wants to recieve signals. Technically, Qt Signals already have a .disconnect() method, but I've never gotten it work reliably. Using an Adapter essentially gives you a nuclear .disconnect(). __init__ def __init__(other=None) _get_signals def _get_signals(obj) __str__ def __str__() __call__ def __call__() adapter def adapter() kill def kill()","title":"Utils.adapter"},{"location":"reference/utils.adapter/#qobject","text":"","title":"QObject"},{"location":"reference/utils.adapter/#signalinstance","text":"","title":"SignalInstance"},{"location":"reference/utils.adapter/#adapter-objects","text":"class Adapter(QObject) A signal adapter that helps create disposable connections between objects. A signal-based interface can be defined using an Adapter. Passing an existing Adapter when creating a new Adapter will automatically link all of the existing adapter's signals to the same-named signals on the new Adapter. This will allow some other object to connect to these signals for whatever purpose, and then simply delete the new Adapter object when it now longer wants to recieve signals. Technically, Qt Signals already have a .disconnect() method, but I've never gotten it work reliably. Using an Adapter essentially gives you a nuclear .disconnect().","title":"Adapter Objects"},{"location":"reference/utils.adapter/#__init__","text":"def __init__(other=None)","title":"__init__"},{"location":"reference/utils.adapter/#_get_signals","text":"def _get_signals(obj)","title":"_get_signals"},{"location":"reference/utils.adapter/#__str__","text":"def __str__()","title":"__str__"},{"location":"reference/utils.adapter/#__call__","text":"def __call__()","title":"__call__"},{"location":"reference/utils.adapter/#adapter","text":"def adapter()","title":"adapter"},{"location":"reference/utils.adapter/#kill","text":"def kill()","title":"kill"},{"location":"reference/utils.decorators/","text":"trace def trace(func)","title":"Utils.decorators"},{"location":"reference/utils.decorators/#trace","text":"def trace(func)","title":"trace"},{"location":"reference/utils.defer/","text":"Defer Objects class Defer() A context manager that emulates the defer keyword from other languages. The deferred thing can be any callable, and arbitrary args and kwargs will be preserved and passed to the thing during exit (). __init__ def __init__(thing, *args, **kwargs) __enter__ def __enter__() __exit__ def __exit__(*_)","title":"Utils.defer"},{"location":"reference/utils.defer/#defer-objects","text":"class Defer() A context manager that emulates the defer keyword from other languages. The deferred thing can be any callable, and arbitrary args and kwargs will be preserved and passed to the thing during exit ().","title":"Defer Objects"},{"location":"reference/utils.defer/#__init__","text":"def __init__(thing, *args, **kwargs)","title":"__init__"},{"location":"reference/utils.defer/#__enter__","text":"def __enter__()","title":"__enter__"},{"location":"reference/utils.defer/#__exit__","text":"def __exit__(*_)","title":"__exit__"},{"location":"reference/utils/","text":"Adapter * Defer singleton SignalBlocker time_since TimeStamp *","title":"Utils"},{"location":"reference/utils/#adapter","text":"","title":"Adapter"},{"location":"reference/utils/#_1","text":"","title":"*"},{"location":"reference/utils/#defer","text":"","title":"Defer"},{"location":"reference/utils/#singleton","text":"","title":"singleton"},{"location":"reference/utils/#signalblocker","text":"","title":"SignalBlocker"},{"location":"reference/utils/#time_since","text":"","title":"time_since"},{"location":"reference/utils/#timestamp","text":"","title":"TimeStamp"},{"location":"reference/utils/#_2","text":"","title":"*"},{"location":"reference/utils.signals/","text":"SignalBlocker Objects class SignalBlocker() A context manager that blocks the signals of the provided widget. The signals are unblocked at the end of the with block. __init__ def __init__(widget) __enter__ def __enter__() __exit__ def __exit__(*_)","title":"Utils.signals"},{"location":"reference/utils.signals/#signalblocker-objects","text":"class SignalBlocker() A context manager that blocks the signals of the provided widget. The signals are unblocked at the end of the with block.","title":"SignalBlocker Objects"},{"location":"reference/utils.signals/#__init__","text":"def __init__(widget)","title":"__init__"},{"location":"reference/utils.signals/#__enter__","text":"def __enter__()","title":"__enter__"},{"location":"reference/utils.signals/#__exit__","text":"def __exit__(*_)","title":"__exit__"},{"location":"reference/utils.singleton/","text":"singleton def singleton(class_)","title":"Utils.singleton"},{"location":"reference/utils.singleton/#singleton","text":"def singleton(class_)","title":"singleton"},{"location":"reference/utils.timestamp/","text":"time time_since def time_since(timestamp) TimeStamp Objects class TimeStamp() __init__ def __init__() time_since def time_since(timestamp=None) update def update() __repr__ def __repr__()","title":"Utils.timestamp"},{"location":"reference/utils.timestamp/#time","text":"","title":"time"},{"location":"reference/utils.timestamp/#time_since","text":"def time_since(timestamp)","title":"time_since"},{"location":"reference/utils.timestamp/#timestamp-objects","text":"class TimeStamp()","title":"TimeStamp Objects"},{"location":"reference/utils.timestamp/#__init__","text":"def __init__()","title":"__init__"},{"location":"reference/utils.timestamp/#time_since_1","text":"def time_since(timestamp=None)","title":"time_since"},{"location":"reference/utils.timestamp/#update","text":"def update()","title":"update"},{"location":"reference/utils.timestamp/#__repr__","text":"def __repr__()","title":"__repr__"},{"location":"reference/utils.utils/","text":"* enable_children def enable_children(thing: QObject) -> None Recursively walk the provided thing and enable all of its widget children. disable_children def disable_children(thing: QObject) -> None Recursively walk the provided thing and disable all of its widget children. get_children def get_children(obj: QObject) -> list Recursively visit all the children of the specified object and collect them in a list. print_children def print_children(obj: QObject, prefix='') -> None Recursively visit all the children of the specified object and print them. set_font_options def set_font_options(obj: QObject, options={}) Set the QFont options of the specified object. Font options are specified by providing the name of the QFont setter method. Example: set_font_options(widget, {'setPointSize': 12, 'setBold': True}) is equivalent to writing: font = widget.font() font.setPointSize(12) font.setBold(True) widget.setFont(font)","title":"Utils.utils"},{"location":"reference/utils.utils/#_1","text":"","title":"*"},{"location":"reference/utils.utils/#enable_children","text":"def enable_children(thing: QObject) -> None Recursively walk the provided thing and enable all of its widget children.","title":"enable_children"},{"location":"reference/utils.utils/#disable_children","text":"def disable_children(thing: QObject) -> None Recursively walk the provided thing and disable all of its widget children.","title":"disable_children"},{"location":"reference/utils.utils/#get_children","text":"def get_children(obj: QObject) -> list Recursively visit all the children of the specified object and collect them in a list.","title":"get_children"},{"location":"reference/utils.utils/#print_children","text":"def print_children(obj: QObject, prefix='') -> None Recursively visit all the children of the specified object and print them.","title":"print_children"},{"location":"reference/utils.utils/#set_font_options","text":"def set_font_options(obj: QObject, options={}) Set the QFont options of the specified object. Font options are specified by providing the name of the QFont setter method. Example: set_font_options(widget, {'setPointSize': 12, 'setBold': True}) is equivalent to writing: font = widget.font() font.setPointSize(12) font.setBold(True) widget.setFont(font)","title":"set_font_options"},{"location":"reference/widgets.buttons/","text":"* StateButton Objects class StateButton(QPushButton) state_changed state @property def state() state @state.setter def state(state) __init__ def __init__(*args, **kwargs) next_state def next_state() update_icon def update_icon() IconToggleButton Objects class IconToggleButton(QPushButton) __init__ def __init__(*args, **kwargs) update_icon def update_icon() ConfirmToggleButton Objects class ConfirmToggleButton(QPushButton) _state_changed state @property def state() state @state.setter def state(state) __init__ def __init__(*args, **kwargs) uncheck def uncheck() confirm def confirm() check def check() next_state def next_state() update_icon def update_icon()","title":"Widgets.buttons"},{"location":"reference/widgets.buttons/#_1","text":"","title":"*"},{"location":"reference/widgets.buttons/#statebutton-objects","text":"class StateButton(QPushButton)","title":"StateButton Objects"},{"location":"reference/widgets.buttons/#state_changed","text":"","title":"state_changed"},{"location":"reference/widgets.buttons/#state","text":"@property def state()","title":"state"},{"location":"reference/widgets.buttons/#state_1","text":"@state.setter def state(state)","title":"state"},{"location":"reference/widgets.buttons/#__init__","text":"def __init__(*args, **kwargs)","title":"__init__"},{"location":"reference/widgets.buttons/#next_state","text":"def next_state()","title":"next_state"},{"location":"reference/widgets.buttons/#update_icon","text":"def update_icon()","title":"update_icon"},{"location":"reference/widgets.buttons/#icontogglebutton-objects","text":"class IconToggleButton(QPushButton)","title":"IconToggleButton Objects"},{"location":"reference/widgets.buttons/#__init___1","text":"def __init__(*args, **kwargs)","title":"__init__"},{"location":"reference/widgets.buttons/#update_icon_1","text":"def update_icon()","title":"update_icon"},{"location":"reference/widgets.buttons/#confirmtogglebutton-objects","text":"class ConfirmToggleButton(QPushButton)","title":"ConfirmToggleButton Objects"},{"location":"reference/widgets.buttons/#_state_changed","text":"","title":"_state_changed"},{"location":"reference/widgets.buttons/#state_2","text":"@property def state()","title":"state"},{"location":"reference/widgets.buttons/#state_3","text":"@state.setter def state(state)","title":"state"},{"location":"reference/widgets.buttons/#__init___2","text":"def __init__(*args, **kwargs)","title":"__init__"},{"location":"reference/widgets.buttons/#uncheck","text":"def uncheck()","title":"uncheck"},{"location":"reference/widgets.buttons/#confirm","text":"def confirm()","title":"confirm"},{"location":"reference/widgets.buttons/#check","text":"def check()","title":"check"},{"location":"reference/widgets.buttons/#next_state_1","text":"def next_state()","title":"next_state"},{"location":"reference/widgets.buttons/#update_icon_2","text":"def update_icon()","title":"update_icon"},{"location":"reference/widgets.labeledit/","text":"* LabelEdit Objects class LabelEdit(QWidget) text_changed __init__ def __init__(text, *args, changed=None, **kwargs) text def text() setText def setText(text) start_editing def start_editing() mouseDoubleClickEvent def mouseDoubleClickEvent(event: QtGui.QMouseEvent) -> None accept def accept() dismiss def dismiss() eventFilter def eventFilter(source, event)","title":"Widgets.labeledit"},{"location":"reference/widgets.labeledit/#_1","text":"","title":"*"},{"location":"reference/widgets.labeledit/#labeledit-objects","text":"class LabelEdit(QWidget)","title":"LabelEdit Objects"},{"location":"reference/widgets.labeledit/#text_changed","text":"","title":"text_changed"},{"location":"reference/widgets.labeledit/#__init__","text":"def __init__(text, *args, changed=None, **kwargs)","title":"__init__"},{"location":"reference/widgets.labeledit/#text","text":"def text()","title":"text"},{"location":"reference/widgets.labeledit/#settext","text":"def setText(text)","title":"setText"},{"location":"reference/widgets.labeledit/#start_editing","text":"def start_editing()","title":"start_editing"},{"location":"reference/widgets.labeledit/#mousedoubleclickevent","text":"def mouseDoubleClickEvent(event: QtGui.QMouseEvent) -> None","title":"mouseDoubleClickEvent"},{"location":"reference/widgets.labeledit/#accept","text":"def accept()","title":"accept"},{"location":"reference/widgets.labeledit/#dismiss","text":"def dismiss()","title":"dismiss"},{"location":"reference/widgets.labeledit/#eventfilter","text":"def eventFilter(source, event)","title":"eventFilter"},{"location":"reference/widgets.layouts/","text":"* alignments orientations ContextLayout Objects class ContextLayout() __init__ def __init__(parent=None, stretch=None, margins=None, align=None, **kwargs) __getattr__ def __getattr__(name) _layout @property def _layout() __call__ def __call__() add def add(item, *args, **kwargs) vbox def vbox(*args, **kwargs) hbox def hbox(*args, **kwargs) grid def grid(*args, **kwargs) split def split(name=None, **kwargs) scroll def scroll(name=None, **kwargs) __enter__ def __enter__() __exit__ def __exit__(*_) CVBoxLayout Objects class CVBoxLayout(ContextLayout, QVBoxLayout) CHBoxLayout Objects class CHBoxLayout(ContextLayout, QHBoxLayout) CGridLayout Objects class CGridLayout(ContextLayout, QGridLayout) CSplitter Objects class CSplitter(QSplitter) __init__ def __init__(parent=None, margins=None, orientation=None, **kwargs) add def add(item, stretch=None) __enter__ def __enter__() __exit__ def __exit__(*args) PersistentCSplitter Objects class PersistentCSplitter(CSplitter) __init__ def __init__(name, parent=None, **kwargs) restore_state def restore_state() __exit__ def __exit__(*args) CScrollArea Objects class CScrollArea(QScrollArea) __init__ def __init__(parent=None, margins=None, orientation=None, **kwargs) add def add(item, stretch=None) addWidget def addWidget(*args, **kwargs) addLayout def addLayout(*args, **kwargs) __enter__ def __enter__() __exit__ def __exit__(*args) PersistentCScrollArea Objects class PersistentCScrollArea(QScrollArea) __init__ def __init__(name, parent=None, **kwargs) scroll_to def scroll_to(value) restore_state def restore_state() __exit__ def __exit__(*args)","title":"Widgets.layouts"},{"location":"reference/widgets.layouts/#_1","text":"","title":"*"},{"location":"reference/widgets.layouts/#alignments","text":"","title":"alignments"},{"location":"reference/widgets.layouts/#orientations","text":"","title":"orientations"},{"location":"reference/widgets.layouts/#contextlayout-objects","text":"class ContextLayout()","title":"ContextLayout Objects"},{"location":"reference/widgets.layouts/#__init__","text":"def __init__(parent=None, stretch=None, margins=None, align=None, **kwargs)","title":"__init__"},{"location":"reference/widgets.layouts/#__getattr__","text":"def __getattr__(name)","title":"__getattr__"},{"location":"reference/widgets.layouts/#_layout","text":"@property def _layout()","title":"_layout"},{"location":"reference/widgets.layouts/#__call__","text":"def __call__()","title":"__call__"},{"location":"reference/widgets.layouts/#add","text":"def add(item, *args, **kwargs)","title":"add"},{"location":"reference/widgets.layouts/#vbox","text":"def vbox(*args, **kwargs)","title":"vbox"},{"location":"reference/widgets.layouts/#hbox","text":"def hbox(*args, **kwargs)","title":"hbox"},{"location":"reference/widgets.layouts/#grid","text":"def grid(*args, **kwargs)","title":"grid"},{"location":"reference/widgets.layouts/#split","text":"def split(name=None, **kwargs)","title":"split"},{"location":"reference/widgets.layouts/#scroll","text":"def scroll(name=None, **kwargs)","title":"scroll"},{"location":"reference/widgets.layouts/#__enter__","text":"def __enter__()","title":"__enter__"},{"location":"reference/widgets.layouts/#__exit__","text":"def __exit__(*_)","title":"__exit__"},{"location":"reference/widgets.layouts/#cvboxlayout-objects","text":"class CVBoxLayout(ContextLayout, QVBoxLayout)","title":"CVBoxLayout Objects"},{"location":"reference/widgets.layouts/#chboxlayout-objects","text":"class CHBoxLayout(ContextLayout, QHBoxLayout)","title":"CHBoxLayout Objects"},{"location":"reference/widgets.layouts/#cgridlayout-objects","text":"class CGridLayout(ContextLayout, QGridLayout)","title":"CGridLayout Objects"},{"location":"reference/widgets.layouts/#csplitter-objects","text":"class CSplitter(QSplitter)","title":"CSplitter Objects"},{"location":"reference/widgets.layouts/#__init___1","text":"def __init__(parent=None, margins=None, orientation=None, **kwargs)","title":"__init__"},{"location":"reference/widgets.layouts/#add_1","text":"def add(item, stretch=None)","title":"add"},{"location":"reference/widgets.layouts/#__enter___1","text":"def __enter__()","title":"__enter__"},{"location":"reference/widgets.layouts/#__exit___1","text":"def __exit__(*args)","title":"__exit__"},{"location":"reference/widgets.layouts/#persistentcsplitter-objects","text":"class PersistentCSplitter(CSplitter)","title":"PersistentCSplitter Objects"},{"location":"reference/widgets.layouts/#__init___2","text":"def __init__(name, parent=None, **kwargs)","title":"__init__"},{"location":"reference/widgets.layouts/#restore_state","text":"def restore_state()","title":"restore_state"},{"location":"reference/widgets.layouts/#__exit___2","text":"def __exit__(*args)","title":"__exit__"},{"location":"reference/widgets.layouts/#cscrollarea-objects","text":"class CScrollArea(QScrollArea)","title":"CScrollArea Objects"},{"location":"reference/widgets.layouts/#__init___3","text":"def __init__(parent=None, margins=None, orientation=None, **kwargs)","title":"__init__"},{"location":"reference/widgets.layouts/#add_2","text":"def add(item, stretch=None)","title":"add"},{"location":"reference/widgets.layouts/#addwidget","text":"def addWidget(*args, **kwargs)","title":"addWidget"},{"location":"reference/widgets.layouts/#addlayout","text":"def addLayout(*args, **kwargs)","title":"addLayout"},{"location":"reference/widgets.layouts/#__enter___2","text":"def __enter__()","title":"__enter__"},{"location":"reference/widgets.layouts/#__exit___3","text":"def __exit__(*args)","title":"__exit__"},{"location":"reference/widgets.layouts/#persistentcscrollarea-objects","text":"class PersistentCScrollArea(QScrollArea)","title":"PersistentCScrollArea Objects"},{"location":"reference/widgets.layouts/#__init___4","text":"def __init__(name, parent=None, **kwargs)","title":"__init__"},{"location":"reference/widgets.layouts/#scroll_to","text":"def scroll_to(value)","title":"scroll_to"},{"location":"reference/widgets.layouts/#restore_state_1","text":"def restore_state()","title":"restore_state"},{"location":"reference/widgets.layouts/#__exit___4","text":"def __exit__(*args)","title":"__exit__"},{"location":"reference/widgets.line_widgets/","text":"* VLine Objects class VLine(QFrame) __init__ def __init__(parent=None, line_width=1) HLine Objects class HLine(QFrame) __init__ def __init__(parent=None, line_width=1)","title":"Widgets.line widgets"},{"location":"reference/widgets.line_widgets/#_1","text":"","title":"*"},{"location":"reference/widgets.line_widgets/#vline-objects","text":"class VLine(QFrame)","title":"VLine Objects"},{"location":"reference/widgets.line_widgets/#__init__","text":"def __init__(parent=None, line_width=1)","title":"__init__"},{"location":"reference/widgets.line_widgets/#hline-objects","text":"class HLine(QFrame)","title":"HLine Objects"},{"location":"reference/widgets.line_widgets/#__init___1","text":"def __init__(parent=None, line_width=1)","title":"__init__"},{"location":"reference/widgets.link_label/","text":"* LinkLabel Objects class LinkLabel(QLabel) __init__ def __init__(text='', link='', both=None, parent=None) setText def setText(text) setLink def setLink(link) _update_text def _update_text()","title":"Widgets.link label"},{"location":"reference/widgets.link_label/#_1","text":"","title":"*"},{"location":"reference/widgets.link_label/#linklabel-objects","text":"class LinkLabel(QLabel)","title":"LinkLabel Objects"},{"location":"reference/widgets.link_label/#__init__","text":"def __init__(text='', link='', both=None, parent=None)","title":"__init__"},{"location":"reference/widgets.link_label/#settext","text":"def setText(text)","title":"setText"},{"location":"reference/widgets.link_label/#setlink","text":"def setLink(link)","title":"setLink"},{"location":"reference/widgets.link_label/#_update_text","text":"def _update_text()","title":"_update_text"},{"location":"reference/widgets/","text":"ContextLayout CVBoxLayout CHBoxLayout CGridLayout CSplitter PersistentCSplitter CScrollArea PersistentCScrollArea StateButton IconToggleButton ConfirmToggleButton LabelEdit LinkLabel VLine HLine PersistentCheckBox PersistentLineEdit PersistentTextEdit PersistentListWidget PersistentTreeWidget PersistentComboBox PersistentCheckableAction PersistentTabWidget","title":"Widgets"},{"location":"reference/widgets/#contextlayout","text":"","title":"ContextLayout"},{"location":"reference/widgets/#cvboxlayout","text":"","title":"CVBoxLayout"},{"location":"reference/widgets/#chboxlayout","text":"","title":"CHBoxLayout"},{"location":"reference/widgets/#cgridlayout","text":"","title":"CGridLayout"},{"location":"reference/widgets/#csplitter","text":"","title":"CSplitter"},{"location":"reference/widgets/#persistentcsplitter","text":"","title":"PersistentCSplitter"},{"location":"reference/widgets/#cscrollarea","text":"","title":"CScrollArea"},{"location":"reference/widgets/#persistentcscrollarea","text":"","title":"PersistentCScrollArea"},{"location":"reference/widgets/#statebutton","text":"","title":"StateButton"},{"location":"reference/widgets/#icontogglebutton","text":"","title":"IconToggleButton"},{"location":"reference/widgets/#confirmtogglebutton","text":"","title":"ConfirmToggleButton"},{"location":"reference/widgets/#labeledit","text":"","title":"LabelEdit"},{"location":"reference/widgets/#linklabel","text":"","title":"LinkLabel"},{"location":"reference/widgets/#vline","text":"","title":"VLine"},{"location":"reference/widgets/#hline","text":"","title":"HLine"},{"location":"reference/widgets/#persistentcheckbox","text":"","title":"PersistentCheckBox"},{"location":"reference/widgets/#persistentlineedit","text":"","title":"PersistentLineEdit"},{"location":"reference/widgets/#persistenttextedit","text":"","title":"PersistentTextEdit"},{"location":"reference/widgets/#persistentlistwidget","text":"","title":"PersistentListWidget"},{"location":"reference/widgets/#persistenttreewidget","text":"","title":"PersistentTreeWidget"},{"location":"reference/widgets/#persistentcombobox","text":"","title":"PersistentComboBox"},{"location":"reference/widgets/#persistentcheckableaction","text":"","title":"PersistentCheckableAction"},{"location":"reference/widgets/#persistenttabwidget","text":"","title":"PersistentTabWidget"},{"location":"reference/widgets.persistent_tab_widget/","text":"* PersistentTabWidget Objects class PersistentTabWidget(QTabWidget) __init__ def __init__(name, tabs=None, *args, **kwargs) menu def menu(pos) -> None unhide_all def unhide_all() restore_state def restore_state(tabs=None) tab_order def tab_order() visible_tabs def visible_tabs() move_tab def move_tab(old, new) close_tab def close_tab(index)","title":"Widgets.persistent tab widget"},{"location":"reference/widgets.persistent_tab_widget/#_1","text":"","title":"*"},{"location":"reference/widgets.persistent_tab_widget/#persistenttabwidget-objects","text":"class PersistentTabWidget(QTabWidget)","title":"PersistentTabWidget Objects"},{"location":"reference/widgets.persistent_tab_widget/#__init__","text":"def __init__(name, tabs=None, *args, **kwargs)","title":"__init__"},{"location":"reference/widgets.persistent_tab_widget/#menu","text":"def menu(pos) -> None","title":"menu"},{"location":"reference/widgets.persistent_tab_widget/#unhide_all","text":"def unhide_all()","title":"unhide_all"},{"location":"reference/widgets.persistent_tab_widget/#restore_state","text":"def restore_state(tabs=None)","title":"restore_state"},{"location":"reference/widgets.persistent_tab_widget/#tab_order","text":"def tab_order()","title":"tab_order"},{"location":"reference/widgets.persistent_tab_widget/#visible_tabs","text":"def visible_tabs()","title":"visible_tabs"},{"location":"reference/widgets.persistent_tab_widget/#move_tab","text":"def move_tab(old, new)","title":"move_tab"},{"location":"reference/widgets.persistent_tab_widget/#close_tab","text":"def close_tab(index)","title":"close_tab"},{"location":"reference/widgets.persistent_widgets/","text":"* PersistentCheckBox Objects class PersistentCheckBox(QCheckBox) __init__ def __init__(name, changed=None, *args, **kwargs) restore_state def restore_state() PersistentLineEdit Objects class PersistentLineEdit(QLineEdit) __init__ def __init__(name, *args, default='', changed=None, **kwargs) restore_state def restore_state() PersistentTextEdit Objects class PersistentTextEdit(QTextEdit) __init__ def __init__(name, *args, default='', changed=None, **kwargs) restore_state def restore_state() PersistentListWidget Objects class PersistentListWidget(QListWidget) __init__ def __init__(name, items=[], default=[], changed=None, *args, **kwargs) selected_items def selected_items() restore_state def restore_state() PersistentTreeWidget Objects class PersistentTreeWidget(QTreeWidget) __init__ def __init__(name, items=[], index_column=0, default=[], changed=None, *args, **kwargs) selected_items def selected_items() restore_state def restore_state() PersistentComboBox Objects class PersistentComboBox(QComboBox) __init__ def __init__(name, items=[], changed=None, *args, **kwargs) restore_state def restore_state() PersistentCheckableAction Objects class PersistentCheckableAction(QAction) __init__ def __init__(name, *args, **kwargs) restore_state def restore_state()","title":"Widgets.persistent widgets"},{"location":"reference/widgets.persistent_widgets/#_1","text":"","title":"*"},{"location":"reference/widgets.persistent_widgets/#persistentcheckbox-objects","text":"class PersistentCheckBox(QCheckBox)","title":"PersistentCheckBox Objects"},{"location":"reference/widgets.persistent_widgets/#__init__","text":"def __init__(name, changed=None, *args, **kwargs)","title":"__init__"},{"location":"reference/widgets.persistent_widgets/#restore_state","text":"def restore_state()","title":"restore_state"},{"location":"reference/widgets.persistent_widgets/#persistentlineedit-objects","text":"class PersistentLineEdit(QLineEdit)","title":"PersistentLineEdit Objects"},{"location":"reference/widgets.persistent_widgets/#__init___1","text":"def __init__(name, *args, default='', changed=None, **kwargs)","title":"__init__"},{"location":"reference/widgets.persistent_widgets/#restore_state_1","text":"def restore_state()","title":"restore_state"},{"location":"reference/widgets.persistent_widgets/#persistenttextedit-objects","text":"class PersistentTextEdit(QTextEdit)","title":"PersistentTextEdit Objects"},{"location":"reference/widgets.persistent_widgets/#__init___2","text":"def __init__(name, *args, default='', changed=None, **kwargs)","title":"__init__"},{"location":"reference/widgets.persistent_widgets/#restore_state_2","text":"def restore_state()","title":"restore_state"},{"location":"reference/widgets.persistent_widgets/#persistentlistwidget-objects","text":"class PersistentListWidget(QListWidget)","title":"PersistentListWidget Objects"},{"location":"reference/widgets.persistent_widgets/#__init___3","text":"def __init__(name, items=[], default=[], changed=None, *args, **kwargs)","title":"__init__"},{"location":"reference/widgets.persistent_widgets/#selected_items","text":"def selected_items()","title":"selected_items"},{"location":"reference/widgets.persistent_widgets/#restore_state_3","text":"def restore_state()","title":"restore_state"},{"location":"reference/widgets.persistent_widgets/#persistenttreewidget-objects","text":"class PersistentTreeWidget(QTreeWidget)","title":"PersistentTreeWidget Objects"},{"location":"reference/widgets.persistent_widgets/#__init___4","text":"def __init__(name, items=[], index_column=0, default=[], changed=None, *args, **kwargs)","title":"__init__"},{"location":"reference/widgets.persistent_widgets/#selected_items_1","text":"def selected_items()","title":"selected_items"},{"location":"reference/widgets.persistent_widgets/#restore_state_4","text":"def restore_state()","title":"restore_state"},{"location":"reference/widgets.persistent_widgets/#persistentcombobox-objects","text":"class PersistentComboBox(QComboBox)","title":"PersistentComboBox Objects"},{"location":"reference/widgets.persistent_widgets/#__init___5","text":"def __init__(name, items=[], changed=None, *args, **kwargs)","title":"__init__"},{"location":"reference/widgets.persistent_widgets/#restore_state_5","text":"def restore_state()","title":"restore_state"},{"location":"reference/widgets.persistent_widgets/#persistentcheckableaction-objects","text":"class PersistentCheckableAction(QAction)","title":"PersistentCheckableAction Objects"},{"location":"reference/widgets.persistent_widgets/#__init___6","text":"def __init__(name, *args, **kwargs)","title":"__init__"},{"location":"reference/widgets.persistent_widgets/#restore_state_6","text":"def restore_state()","title":"restore_state"},{"location":"structure/makefile/","text":"Makefile The provided Makefile has several targets that assist with general project development. Using the Makefile means that you do not have to activate the venv unless you need to interact with it directly. The Makefile uses specially constructed targets to automatically build the venv and execute using the venv's python installation. General targets: make run run your project make debug run your project in debug mode make bundle builds a single-folder bundle using PyInstaller make run_bundle run the single-folder bundle's executable make zip compress the bundle into a zip file make installer wrap the bundle into a Windows installer using Inno Setup make clean delete the project's build artifacts The Makefile also seamlessly manages your python virtual environment using the following targets: make venv create the venv, if it doesn't exist make pip passes it's args to the venv's pip make clean_venv deletes the venv make reset_venv deletes the venv and then rebuilds it Virtual Environment Management TODO: a brief intro to Makefiles, and then an explanation of how this Makefile manages the venv","title":"Makefile"},{"location":"structure/makefile/#makefile","text":"The provided Makefile has several targets that assist with general project development. Using the Makefile means that you do not have to activate the venv unless you need to interact with it directly. The Makefile uses specially constructed targets to automatically build the venv and execute using the venv's python installation. General targets: make run run your project make debug run your project in debug mode make bundle builds a single-folder bundle using PyInstaller make run_bundle run the single-folder bundle's executable make zip compress the bundle into a zip file make installer wrap the bundle into a Windows installer using Inno Setup make clean delete the project's build artifacts The Makefile also seamlessly manages your python virtual environment using the following targets: make venv create the venv, if it doesn't exist make pip passes it's args to the venv's pip make clean_venv deletes the venv make reset_venv deletes the venv and then rebuilds it","title":"Makefile"},{"location":"structure/makefile/#virtual-environment-management","text":"TODO: a brief intro to Makefiles, and then an explanation of how this Makefile manages the venv","title":"Virtual Environment Management"},{"location":"structure/structure/","text":"Project Structure This is the project structure that's created by running qtstrap init : |-- app | |-- main.py | |-- appinfo.py |-- resources | |-- application.ico | |-- icon.svg |-- bundle.spec |-- installer.iss |-- Makefile |-- requirements.txt Files app folder Your application's python source code should all be placed here. A newly created qtstrap project contains app/main.py , app/application.py , and app/main_window.py . appinfo.py Contains information about the project like the Application Name and Publisher. This file is referenced by bundle.spec and installer.iss , and used to feed information to PyInstaller and InnoSetup. The project file defines the following fields: AppName your app's name AppVersion your app's version number AppPublisher your app's publisher, which is most likely you AppExeName the name of the executable created by make bundle AppIconName the path to your application's icon AppId a GUID used by Inno Setup to uniquely identify your app Makefile The provided Makefile has several targets that assist with general project development. Using the Makefile means that you do not have to activate the venv unless you need to interact with it directly. The Makefile uses specially constructed targets to automatically build the venv and execute using the venv's python installation. Most of the time you'll just use make run to start your application. When you're ready to package up your app for distribution, you'll want to use make bundle , make zip , and (on Windows) make installer . More information about the Makefile and it's targets can found here resources/application.ico and icon.svg Icon files that are automatically applied to the app's titlebar, taskbar entry, bundle, and installer. When running the bundled executable, the installer, or the installed version of your app, the icon should also appear in Windows Task Manager. requirements.txt Your application's python dependecies. If your application uses any packages, you should list them here, preferably with the versions pinned. A fresh project created with qtstrap init looks something like this: altgraph==0.17 click==7.1.2 future==0.18.2 pefile==2019.4.18 prompt-toolkit==1.0.14 Pygments==2.8.1 PyInquirer==1.0.3 pyinstaller==4.2 pyinstaller-hooks-contrib==2021.1 PySide2==5.15.2 pywin32-ctypes==0.2.0 qtstrap==0.0.7 regex==2021.3.17 shiboken2==5.15.2 six==1.15.0 wcwidth==0.2.5 bundle.spec A PyInstaller spec file that creates a single-folder executable. The bundle is created at ./dist/$AppName/ , and the executable at ./dist/$AppName/$AppName.exe . installer.iss An Inno Setup setup compiler script that creates a Windows installer. The installer is created at /dist/installer/$AppName-$AppVersion-Setup.exe","title":"Project Structure"},{"location":"structure/structure/#project-structure","text":"This is the project structure that's created by running qtstrap init : |-- app | |-- main.py | |-- appinfo.py |-- resources | |-- application.ico | |-- icon.svg |-- bundle.spec |-- installer.iss |-- Makefile |-- requirements.txt","title":"Project Structure"},{"location":"structure/structure/#files","text":"","title":"Files"},{"location":"structure/structure/#app-folder","text":"Your application's python source code should all be placed here. A newly created qtstrap project contains app/main.py , app/application.py , and app/main_window.py .","title":"app folder"},{"location":"structure/structure/#appinfopy","text":"Contains information about the project like the Application Name and Publisher. This file is referenced by bundle.spec and installer.iss , and used to feed information to PyInstaller and InnoSetup. The project file defines the following fields: AppName your app's name AppVersion your app's version number AppPublisher your app's publisher, which is most likely you AppExeName the name of the executable created by make bundle AppIconName the path to your application's icon AppId a GUID used by Inno Setup to uniquely identify your app","title":"appinfo.py"},{"location":"structure/structure/#makefile","text":"The provided Makefile has several targets that assist with general project development. Using the Makefile means that you do not have to activate the venv unless you need to interact with it directly. The Makefile uses specially constructed targets to automatically build the venv and execute using the venv's python installation. Most of the time you'll just use make run to start your application. When you're ready to package up your app for distribution, you'll want to use make bundle , make zip , and (on Windows) make installer . More information about the Makefile and it's targets can found here","title":"Makefile"},{"location":"structure/structure/#resourcesapplicationico-and-iconsvg","text":"Icon files that are automatically applied to the app's titlebar, taskbar entry, bundle, and installer. When running the bundled executable, the installer, or the installed version of your app, the icon should also appear in Windows Task Manager.","title":"resources/application.ico and icon.svg"},{"location":"structure/structure/#requirementstxt","text":"Your application's python dependecies. If your application uses any packages, you should list them here, preferably with the versions pinned. A fresh project created with qtstrap init looks something like this: altgraph==0.17 click==7.1.2 future==0.18.2 pefile==2019.4.18 prompt-toolkit==1.0.14 Pygments==2.8.1 PyInquirer==1.0.3 pyinstaller==4.2 pyinstaller-hooks-contrib==2021.1 PySide2==5.15.2 pywin32-ctypes==0.2.0 qtstrap==0.0.7 regex==2021.3.17 shiboken2==5.15.2 six==1.15.0 wcwidth==0.2.5","title":"requirements.txt"},{"location":"structure/structure/#bundlespec","text":"A PyInstaller spec file that creates a single-folder executable. The bundle is created at ./dist/$AppName/ , and the executable at ./dist/$AppName/$AppName.exe .","title":"bundle.spec"},{"location":"structure/structure/#installeriss","text":"An Inno Setup setup compiler script that creates a Windows installer. The installer is created at /dist/installer/$AppName-$AppVersion-Setup.exe","title":"installer.iss"}]}